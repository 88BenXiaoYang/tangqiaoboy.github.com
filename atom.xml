<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[唐巧的技术博客]]></title>
  <subtitle><![CDATA[记录下自己学习的点滴]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.devtang.com/"/>
  <updated>2016-10-10T12:43:09.000Z</updated>
  <id>http://blog.devtang.com/</id>
  
  <author>
    <name><![CDATA[唐巧]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[iOS 移动开发周报 - 第 46 期]]></title>
    <link href="http://blog.devtang.com/2016/10/10/ios-weekly-46/"/>
    <id>http://blog.devtang.com/2016/10/10/ios-weekly-46/</id>
    <published>2016-10-10T13:08:08.000Z</published>
    <updated>2016-10-10T12:43:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>大家国庆节过得如何？我反正是整个人的作息都变了，估计要调整过来得花不少时间。</p>
<p>国庆节期间开车还经历了人生第一次剐蹭，倒车时方向盘转得过猛，车头把停在旁边的一台宝马 5 系给蹭到了，吓得我赶紧报了保险。结果最后定损的维修费用也就几百块钱，用交强险就 cover 住所有费用了。人生就是不停地经历，有了这次出险，以后估计开车会更加小心。</p>
<p>好了，言归正传，我们来看看本周的 iOS 新闻。</p>
<h2 id="u65B0_u95FB"><a href="#u65B0_u95FB" class="headerlink" title="新闻"></a>新闻</h2><h3 id="Search_Ads__u4E0A_u7EBF"><a href="#Search_Ads__u4E0A_u7EBF" class="headerlink" title="Search Ads 上线"></a>Search Ads 上线</h3><p>苹果的 AppStore 搜索广告终于 <a href="https://developer.apple.com/news/?id=09282016a" target="_blank" rel="external">正式上线了</a>，不过现在仅支持 iPhone 平台和美国区。AppStore 搜索广告类似于百度搜索关健词的竞价排名机制，该平台未来在中国区上线之后，我估计会使得一部分刷榜行为转移到正常的广告投放上。另外各个公司其实也需要及时介入，对自己的商标或产品关键词进行提前保护，以避免被恶意投放广告。关于 Search Ads 的详细介绍，今年的 WWDC 有<a href="https://developer.apple.com/videos/play/wwdc2016/302/" target="_blank" rel="external">专门的介绍视频</a>，建议大家都看看。</p>
<h3 id="Dash__u88AB_AppStore__u4E0B_u67B6"><a href="#Dash__u88AB_AppStore__u4E0B_u67B6" class="headerlink" title="Dash 被 AppStore 下架"></a>Dash 被 AppStore 下架</h3><p>Dash 是一款优秀的 Mac 效率工具，恰当的使用它，可以极大地提高你的输入速度。最近，作者被 Apple 告知其帐户「因涉嫌诈欺」而被停权。作者提供了授权迁移工具，便于大家将授权转移出来。详情：<a href="https://zhuanlan.zhihu.com/p/22782111" target="_blank" rel="external">阅读原文</a>。</p>
<p>关于 Dash 被下架的原因，大家众说纷纭，其中有一个说法是：Dash 在将其的个人帐户转成企业帐户时，涉及的邓白氏码（DUNS）的代理公司可能提供的信息有问题，牵连了 Dash。</p>
<h3 id="u6625_u96E8_u533B_u751F_u521B_u59CB_u4EBA_u5F20_u9510_u53BB_u4E16"><a href="#u6625_u96E8_u533B_u751F_u521B_u59CB_u4EBA_u5F20_u9510_u53BB_u4E16" class="headerlink" title="春雨医生创始人张锐去世"></a>春雨医生创始人张锐去世</h3><p>我和张锐有过在网易门户的短暂共事经历，不曾想到张锐正值创业上升时期 <a href="http://politics.caijing.com.cn/20161006/4183250.shtml" target="_blank" rel="external">离世</a>，令人唏嘘不已。国内互联网公司虽然有着远高于别的行业的平均薪水，但是也同时伴随着极高的工作强度，不管是创业公司，还是已经上市的 BAT，加班就犹如家常便饭。但是，身体总归还是我们自己的，希望大家都能平衡好事业和身体。</p>
<h2 id="u6587_u7AE0"><a href="#u6587_u7AE0" class="headerlink" title="文章"></a>文章</h2><h3 id="Swift_3"><a href="#Swift_3" class="headerlink" title="Swift 3"></a>Swift 3</h3><p>Swift 3 的迁移工作并不轻松，喵神说他的开源库 <a href="https://github.com/onevcat/Kingfisher" target="_blank" rel="external">Kingfisher</a> 大概花了 200 个提交，才完成了迁移工作。</p>
<p>最近，Glow 技术团队分享了 Swift 3 带来的改变，感兴趣的可以<a href="http://tech.glowing.com/cn/swift3/" target="_blank" rel="external">点这里阅读</a>。</p>
<p>国庆前，图拉鼎也分享了适配 Swift 3 的一点小经验和坑，<a href="https://imtx.me/archives/2064.html" target="_blank" rel="external">点这里阅读</a>。</p>
<h3 id="Let_u2019s_Talk_About_project-pbxproj"><a href="#Let_u2019s_Talk_About_project-pbxproj" class="headerlink" title="Let’s Talk About project.pbxproj"></a>Let’s Talk About project.pbxproj</h3><p><code>project.pbxproj</code> 文件被包含于 Xcode 工程文件 <code>*.xcodeproj</code> 之中，存储着 Xcode 工程的各项配置参数。它本质上是一种旧风格的 Property List 文件，历史可追溯到 NeXT 的 OpenStep。其可读性不如 xml 和 json，苹果却一直沿用至今，作为一家以创新闻名的公司可能这里剩下的就是情怀吧。</p>
<p>本文谈了下 <code>project.pbxproj</code> 的知识，并总结了一些操作工程文件的优秀轮子，并在最后给出了自己的解决方案 <a href="https://github.com/yulingtianxia/pbxprojHelper" target="_blank" rel="external">pbxprojHelper</a>。</p>
<p>阅读请戳：<a href="http://t.cn/Rcg8jUc" target="_blank" rel="external">http://t.cn/Rcg8jUc</a></p>
<h3 id="Swift__u7B97_u6CD5"><a href="#Swift__u7B97_u6CD5" class="headerlink" title="Swift 算法"></a>Swift 算法</h3><p>Ray Wenderlich 上有一个算法系列的专题，叫做《Swift Algorithm Club》，每个月会出一篇文章，介绍如何用 Swift 实现一些基本的算法，最新的一期文章是《Swift Linked List Data Structure》，感兴趣的<a href="http://t.cn/RVzeGCu" target="_blank" rel="external">点这里阅读</a>。</p>
<h2 id="u4F1A_u8BAE"><a href="#u4F1A_u8BAE" class="headerlink" title="会议"></a>会议</h2><h3 id="/dev/world/2016__u5927_u4F1A"><a href="#/dev/world/2016__u5927_u4F1A" class="headerlink" title="/dev/world/2016 大会"></a>/dev/world/2016 大会</h3><p>在澳大利亚举办的 /dev/world/2016 大会结束后，主办方公开的相关的大会演讲视频。视频内容涉及跨平台开发、UI 设计、自动化测试、Swift、函数式编程，欢迎围观：<a href="http://t.cn/RcucyX2" target="_blank" rel="external">http://t.cn/RcucyX2</a>。注意地址在 youtube 上，需要翻墙。</p>
<h2 id="u5F00_u6E90_u9879_u76EE"><a href="#u5F00_u6E90_u9879_u76EE" class="headerlink" title="开源项目"></a>开源项目</h2><p>本周开源项目推荐的是 <a href="https://github.com/castial/HYFileManager/blob/master/Docs/README_cn.md" target="_blank" rel="external">HYFileManager</a>，HYFileManager 一个基于 NSFileManager的文件操作类，它提供一系列的静态方法，只用少量的代码，来处理经常需要处理的文件操作，使得工作更加方便快捷。</p>
<h2 id="u6709_u8DA3"><a href="#u6709_u8DA3" class="headerlink" title="有趣"></a>有趣</h2><p>据说下图表示的是「断点调试」的场景：</p>
<p><img src="http://ww4.sinaimg.cn/mw690/805c3d47jw1f8l8r3389gg20dw0a1b08.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>大家国庆节过得如何？我反正是整个人的作息都变了，估计要调整过来得花不少时间。</p>
<p>国庆节期间开]]>
    </summary>
    
      <category term="iOS weekly" scheme="http://blog.devtang.com/categories/iOS-weekly/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS移动开发周报-第45期]]></title>
    <link href="http://blog.devtang.com/2016/09/26/ios-weekly-45/"/>
    <id>http://blog.devtang.com/2016/09/26/ios-weekly-45/</id>
    <published>2016-09-26T14:15:15.000Z</published>
    <updated>2016-09-26T14:22:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>是的，我又开始写周报了！主要是因为喵神不写周报了，加上我发现大家对写 iOS 技术周报这件事情似乎没什么兴趣。其实我觉得这是一个挺好的学习总结的办法，所以要不就继续我来吧。</p>
<p>我会每周从国外的周报，微博，GitHub，QQ / 微信群里收集各种 iOS 的信息，然后挑选一些有价值的分享给大家。</p>
<h2 id="MDCC"><a href="#MDCC" class="headerlink" title="MDCC"></a>MDCC</h2><p>MDCC 大会刚刚结束，这次大会请来了在日本的喵神王巍，滴滴的孙源，LeanCloud 的陈宜龙等众多 iOS 开发者。会议的所有 iOS 讲稿都会更新到这个地址，感兴趣的同学请一定关注更新：<a href="https://github.com/MDCC2016/iOS-Session-Slides" target="_blank" rel="external">https://github.com/MDCC2016/iOS-Session-Slides</a></p>
<p>王巍提前已经将他的讲稿和 Demo 代码公布在微博上了，地址是：<a href="http://weibo.com/1708947107/E9JHnoNtS" target="_blank" rel="external">http://weibo.com/1708947107/E9JHnoNtS</a></p>
<h2 id="u82F9_u679C_u52A0_u5F3A_u5E94_u7528_u6807_u9898_u5BA1_u6838_u529B_u5EA6"><a href="#u82F9_u679C_u52A0_u5F3A_u5E94_u7528_u6807_u9898_u5BA1_u6838_u529B_u5EA6" class="headerlink" title="苹果加强应用标题审核力度"></a>苹果加强应用标题审核力度</h2><p>你的应用最近因为起名字的原因被拒过吗？在以前，由于标题文字在搜索中的排序权重较高，所以有一些应用会把一些热门关键词写在标题中。苹果对此行为一直管得不严，有些审核员管，有些审核员不管。不过最近似乎每个审核员都更加严格执行这项标准了，那些稍长的名字，都被要求进行进一步的精简。详见：<a href="http://www.gupowang.com/app/5057.html" target="_blank" rel="external">http://www.gupowang.com/app/5057.html</a></p>
<h2 id="u9002_u914D_iOS_10"><a href="#u9002_u914D_iOS_10" class="headerlink" title="适配 iOS 10"></a>适配 iOS 10</h2><p>Xcode 10 发布以后，编译器开始不支持 iOS 7，所以很多应用在适配完 iOS 10 以后，都不再支持 iOS 7 了。我的同事看了一下，包括网易新闻，滴滴出行这些大应用也都选择了不再兼容 iOS 7 的方法。但是也有一些应用选择适配 iOS 10 同时支持 iOS 7，这些应用有 QQ，美团 等。由于 AppStore 支持 iOS 7 的设备下载旧的版本，所以我个人觉得即便不支持 iOS 7，所以不支持 iOS 7 或许是最省事的办法。</p>
<h2 id="Swift_3"><a href="#Swift_3" class="headerlink" title="Swift 3"></a>Swift 3</h2><p>Swift 3 推出之后，Ray 出了一个迁移到 Swift 3 的视频教程，感兴趣的同学可以看看，不过据说，Alarmfire 网络库在适配 Swift 3 后，只支持 iOS 9 以上的版本。这对于国内系统升级缓慢的应用来说，似乎是一个很尴尬的事情。另一个尴尬的事情是迁移 Swift 3 还需要各种第三方库的配合，当前看起来，还需要一些时间。所以，建议大家还是继续使用 Swift 2.3  的版本。<a href="https://videos.raywenderlich.com/screencasts/ios-10-swift-3-in-3-minutes" target="_blank" rel="external">https://videos.raywenderlich.com/screencasts/ios-10-swift-3-in-3-minutes</a></p>
<h2 id="Push_Notifications"><a href="#Push_Notifications" class="headerlink" title="Push Notifications"></a>Push Notifications</h2><p>苹果最近改进了它的 Push Notifications 使用方式，除了可以使用以前的证书验证方式外，增加了一种名为 Token Authentication 的方式。苹果原话说： A token is easy to generate, doesn’t expire, and can be used to send notifications to all of your apps. 感兴趣的读者可以试试，相关链接：<a href="https://developer.apple.com/news/?id=09222016a" target="_blank" rel="external">https://developer.apple.com/news/?id=09222016a</a></p>
<h2 id="Vapor"><a href="#Vapor" class="headerlink" title="Vapor"></a>Vapor</h2><p>Vapor 1.0 正式发布了，这是一个基于 Swift 的服务器端框架，感兴趣的朋友可以玩玩。<a href="http://vapor.codes/" target="_blank" rel="external">http://vapor.codes/</a></p>
<h2 id="u6709_u8DA3"><a href="#u6709_u8DA3" class="headerlink" title="有趣"></a>有趣</h2><p>最近 AppStore 的热门搜索出现了奇怪的词条，详见下面第三条，看不懂的别问我，我也不懂！请向老司机请教！</p>
<p><img src="http://ww2.sinaimg.cn/mw690/65dc76a3jw1f7zsq678yij20qo1bf410.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>是的，我又开始写周报了！主要是因为喵神不写周报了，加上我发现大家对写 iOS 技术周报这件事情似乎没什么]]>
    </summary>
    
      <category term="iOS weekly" scheme="http://blog.devtang.com/categories/iOS-weekly/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[什么是爱 - 读《少有人走的路》]]></title>
    <link href="http://blog.devtang.com/2016/09/16/what-is-love/"/>
    <id>http://blog.devtang.com/2016/09/16/what-is-love/</id>
    <published>2016-09-16T15:04:36.000Z</published>
    <updated>2016-09-16T15:04:36.000Z</updated>
    <content type="html"><![CDATA[<img src="/images/the-road-less-traveled-book.jpg">
<h2 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h2><p>爱是什么？这或许是一个永恒的话题。我很少从学校的传统教育以及家庭教育中获得这方面的知识。</p>
<p>我小的时候对于爱的解释，印象中的故事竟然都是来自是电影：一部是 <a href="http://baike.baidu.com/item/%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7/6162581" target="_blank" rel="external">《泰坦尼克号》</a>，另一部是 <a href="http://baike.baidu.com/item/%E7%9C%9F%E7%88%B1%E8%87%B3%E4%B8%8A/1671898" target="_blank" rel="external">《真爱至上》</a>。《泰坦尼克号》的男主 Jack 为了心爱的人，放弃自己生存的机会，让我以为爱是一种牺牲。而在大学时看的《真爱至上》，电影中的 10 个故事，讲了各种各样爱的故事，有小朋友之间的爱，有情侣之间的爱，更有同性之间的爱。电影最后的一句台词给爱下了一个更广泛的定义：「Love actually is everthing.」，</p>
<p>我现在 30 多岁了，结婚了，也有了小孩，有些时候我觉得爱就一种亲情，但是又说不清楚。因为家庭生活中其实会有各种琐事，各种争吵，有些时候也会困惑，不知该如何处理。</p>
<p>还是要感谢李笑来老师，他推荐的这本 <a href="http://item.jd.com/11323419.html" target="_blank" rel="external">《少有人走的路》</a>，用更详尽的篇章，从一个学术的角度讨论了什么是爱。这本书的作者斯科特·派克是一个心理医生，在书中的第二部分，作者详尽分析了各种关于爱的行为，告诉我们什么样的行为是爱，什么样的行为不是爱。</p>
<h2 id="u7231_u7684_u5B9A_u4E49"><a href="#u7231_u7684_u5B9A_u4E49" class="headerlink" title="爱的定义"></a>爱的定义</h2><p>作者从他的角度，给爱下了如下的定义：</p>
<blockquote>
<p>爱，是为了促进自我和他人心智成熟，而具有的一种自我完善的意愿。</p>
</blockquote>
<p>这个定义非常有意思，完全不同于我们以前了解到的爱的描述，我们从中可以看到两个特征：</p>
<ol>
<li>爱可以使双方都获得心智成熟。这就像是杨过和小龙女的「双修」一样，是一种共同进步的互利行为。</li>
<li>爱是一种自我完善的意愿。我们都希望通过它获得心智的成熟，人格的独立。</li>
</ol>
<h2 id="u7231_u7684_u8BEF_u89E3"><a href="#u7231_u7684_u8BEF_u89E3" class="headerlink" title="爱的误解"></a>爱的误解</h2><p>弄清楚什么是爱是很难的，但是反过来，弄清楚什么不是爱相对来说容易一些，所以本书中分析了四种常见的错误的「爱」，分别是：坠入情网、依赖性、自我牺牲、（仅有）感觉。</p>
<h3 id="u5760_u5165_u60C5_u7F51"><a href="#u5760_u5165_u60C5_u7F51" class="headerlink" title="坠入情网"></a>坠入情网</h3><p>坠入情网不是爱。这可能是最常见的误区吧。年轻时的我们，由于荷尔蒙的分泌，对异性产生好感，进一步渴望和异性交往，然后坠入情网，最终啪啪啪以及结婚生子。作者认为坠入情网不是爱的核心理由是：坠入情网的 “爱” 不会持续太久，不管爱的对象是谁，早晚我们都会从情网的羁绊中 “爬出”。有一个词叫「七年之痒」，其实也是说这个道理。坠入情网这种爱更像是一种冲动和激情，随着时间会慢慢消退。</p>
<p>刚刚说到爱需要使双方心智变得成熟。但是坠入情网，惟一的好处就是消除寂寞。即便经由婚姻，使这一功用得以延长，也无助于心智的成熟。</p>
<p>悲观一点说，坠入情网其实是一种受人类本能控制的，来自我们 DNA 中繁衍需求的刺激。它的意义在于增加人类生殖机会，促进物种繁衍和生存。但是坠入情网其实是产生真正的爱的一个很好的媒介，后面我们再详细讨论。</p>
<h3 id="u4F9D_u8D56_u6027"><a href="#u4F9D_u8D56_u6027" class="headerlink" title="依赖性"></a>依赖性</h3><p>依赖性不是爱。我们会见到各种依赖性的行为，比如小孩对父母的依赖，妻子对丈夫的依赖，甚至父母对小孩也有依赖。一些小孩长大之后离开家门，父母会特别难受，但都会调整接受。如果一个父母因为对小孩有依赖，阻止孩子去外地上学或者工作，那么这种依赖性就不是爱了，因为它其实对孩子的发展并不有利。</p>
<p>反过来，父母的这种行为对于自己也是不利的，因为这也体现出他们的人格并不独立。总有一天，孩子还是会追求自由与不受控制，到时候父母也容易产生心理问题。</p>
<p>所以，过度的依赖行为其实使孩子和父母都丧失了人格的独立性，是不利于心智发展的，所以不是爱。</p>
<h3 id="u81EA_u6211_u727A_u7272"><a href="#u81EA_u6211_u727A_u7272" class="headerlink" title="自我牺牲"></a>自我牺牲</h3><p>自我牺牲不是爱。我们常常见到这样的行为：爷爷奶奶给孙子孙女买特别多的玩具，什么事情都惯着孩子，为了满足孩子的各种需求，甚至会牺牲一些自己的东西，例如金钱，健康，时间。这些牺牲如果是利于孩子身心发展的，那就是爱；如果最终使得孩子产生很坏的生活习惯和沟通方式，那么不但不是爱，还是一种伤害。</p>
<p>所以，自我牺牲的付出不一定是爱，还得看付出之后的效果是怎样的。</p>
<h3 id="u611F_u89C9"><a href="#u611F_u89C9" class="headerlink" title="感觉"></a>感觉</h3><p>爱，不是感觉。爱是一种行为，而不是一种感觉。如果你整天只是把爱挂在嘴上，但是并没有任何行为付出，那么其实这就不是爱。作者在书中指出，一些家庭的父母并不关心孩子的身心，只知道通过简单粗暴的方式来教育孩子，嘴上说是爱孩子，其实根本就没有付出真正上的行为。</p>
<p>作为父母，把孩子喂饱，提供教育相关的资金支持，仅仅是尽到了最基本的义务。而和孩子一起玩耍，交流，解决孩子的困难，纠正孩子的错误，关注和帮助孩子成长，才是更重要的行为。</p>
<h2 id="u5982_u4F55_u7231"><a href="#u5982_u4F55_u7231" class="headerlink" title="如何爱"></a>如何爱</h2><p>那么，我们应该如何去爱呢？作者介绍了一些原则：</p>
<ol>
<li>首先，爱与不爱最显著的区别之一，在于当事人的意识思维和潜意识思维的目标是否一致。</li>
<li>第二，爱是长期的和渐进的过程。爱是自我完善，意味着心智不断成熟。爱，能够帮助他人进步，也会使自我更加成熟。</li>
<li>第三，真正意义上的爱，既是爱自己，也是爱他人。爱，可以使自我和他人感觉到进步。不爱自己的人，绝不可能去爱他人。</li>
<li>第四，爱是自我完善，也是帮助他人完善。它意味着持续努力，超越自我界限。</li>
</ol>
<p>在以上原则下，作者提供了一些实践的办法：</p>
<ol>
<li>关注：爱最重要的体现形式，就是关注。体现关注，一种最常见、最重要的方式，就是 “倾听”。</li>
<li>自律：自律，是将爱转化为实际行动的过程。这里面涉及情绪的控制，我们既不能过于放纵情绪，也不能过于压抑情绪。</li>
<li>独立：爱的重要特征之一，在于爱者与被爱者都不是对方的附属品。付出真爱的人，应该永远把爱的对象视为独立的个体，永远尊重对方的独立和成长。</li>
</ol>
<p>最终，如果我们这么做，就会产生精神贯注的现象：</p>
<blockquote>
<p>真正的爱，是自我完善的特殊体验，跟自我界限有着密切关联。陶醉在爱的情感里，我们感觉灵魂无限延伸，奔向心爱的对象。我们渴望给对方滋养，我们希望对方成长。被自我界限之外的对象吸引，迫使我们产生冲动，想把激情乃至生命献给对方，心理学家把这样的激情状态，称为 “精神贯注”。我们贯注的对象，正是所爱的人或所爱的事物。</p>
</blockquote>
<h2 id="u7231_u7684_u98CE_u9669"><a href="#u7231_u7684_u98CE_u9669" class="headerlink" title="爱的风险"></a>爱的风险</h2><p>即便我们做到了真正的爱，但是也会面临一些风险：</p>
<ol>
<li>死亡的风险：精神贯注的代价之一，似乎是或早或晚你都要因为贯注对象的死亡或离去，让自己饱受痛苦的折磨。如果不想经受个中痛苦，就必须放弃生活中许多事物，包括子女、婚姻、性爱、晋升、友谊，但惟有这些事物，才能够使人生丰富多彩。</li>
<li>独立的风险：我们必须不再完全依赖任何人，成为一个人格独立的个体。</li>
<li>承诺的风险：我们需要具有责任感，承诺与爱相关的义务。</li>
<li>冲突的风险：我们需要面临与所爱的人的冲突，并且在冲突发生时，以帮助对方心智成熟作为出发点，来解决冲突。只有以爱为出发点，投入全部的情感，做出真挚的承诺，才能更好地滋养对方的心灵。例如，父母和孩子发生冲突时，首先应该自我检讨，认清自己的价值观，才能采取正确的方式，才能恰当地教育孩子。</li>
</ol>
<p>关于死亡的风险我深有感触。我现在 30 岁了，整个身体都不像 20 多岁那样有活力了，加班太晚会感觉特别累。我相信有一天，我会发现自己真的老了，不光精力大不如从前，可能视力，听力都退化了，那个时候我需要放弃很多年轻时获得的成就，但是这就是人生，所有人都逃避不了死亡。</p>
<p>关于冲突，我也有一些体会。我有时候在家里会抱怨一些事情，后来我发现，这除了让我和家人产生矛盾以外，完全无助于解决任何问题。所以我开始反思我是否应该用更加有效的方式来和家人沟通，试过几次之后，我发现家人也这些事情也有自己的看法。在冲突发生时，用诚实和谦逊的态度先自我反省，再进一步沟通，最终大家会学会到更好的相处方式。这确实也让我的心智更加成熟了，对情绪的控制（自律能力）更强了。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p><a href="http://item.jd.com/11323419.html" target="_blank" rel="external">《少有人走的路》</a> 让我对爱有了更客观的认识，一句话总结：爱就是一种精神贯注的行为，它可以使自己和对方的心智都成长起来，从而获得健全的人格。</p>
<p>但是作者也坦诚地说，这样的定义还是无法解释很多爱的行为，不过对于我来说，已经学到很多了，推荐给大家。以下是本书第二部分的思维导图总结：</p>
<img src="/images/the-road-less-traveled-mindnode.jpg">
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/the-road-less-traveled-book.jpg">
<h2 id="u5F15_u8A00"><a href="#u5F15_u8A00" class="headerlink" title="引言"></a>引言</h2><p>]]>
    </summary>
    
      <category term="books" scheme="http://blog.devtang.com/tags/books/"/>
    
      <category term="books summary" scheme="http://blog.devtang.com/categories/books-summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[打开你的脑洞]]></title>
    <link href="http://blog.devtang.com/2016/09/04/open-your-brain/"/>
    <id>http://blog.devtang.com/2016/09/04/open-your-brain/</id>
    <published>2016-09-04T14:20:11.000Z</published>
    <updated>2016-09-04T14:28:04.000Z</updated>
    <content type="html"><![CDATA[<img src="/images/open-brain.jpg">
<h2 id="u804C_u4E1A_u75C5"><a href="#u804C_u4E1A_u75C5" class="headerlink" title="职业病"></a>职业病</h2><p>我的大学是在北京师范大学读的，当时读的一个叫做「励耘实验班」的专业（现在已经取消了），美其名曰第一年进行通识教育，第二年选专业。我最终选择了计算机专业，并且有幸和一群不同专业的室友一起生活了四年。</p>
<p>其中一个室友选了「数字媒体」专业，他在专业学习过程中，需要每天看各种电影，分析各种电影片段的拍摄手法。那个时候（03 年）网络还不发达，他有一个大书架，上面全是他买的各种电影光盘。有一次和他聊天，他说道：「我现在看电影已经无法融入剧情中了，因为我一看见电影，脑海里面想的就是当前的摄像机机位在哪里，用了什么拍摄手法，为什么导演要用这样的手法」。</p>
<p>有人把这种现场取一个名词，叫「职业病」，就像警察一样，不管有没有上班，都会下意识地观察有没有行为异常的路人。而我做为一个 iOS 开发者，每每试用一款新的 App，看到一些交互效果，第一想到的不是这个效果多酷，而是想这个效果是用什么技术方案做到的。</p>
<p>我以前觉得这就是「职业病」，但是突然有一天，我发现这还不是「职业病」这么简单的事情。</p>
<h2 id="u8111_u6D1E"><a href="#u8111_u6D1E" class="headerlink" title="脑洞"></a>脑洞</h2><p>事情的转折发生在我开始转型，从一个 iOS 开发，转变为一个团队管理者。我开始参与产品和 UI 的讨论。这个时候，我发现我开始关注技术实现之外的东西，拿到一款 App，我不但会考虑它的技术实现，也会考虑产品经理这么设计的意图，也会考虑用户使用这个功能的场景，还会考虑视觉设计的特点。</p>
<p>于是，我觉得这不是职业病，而是打开了另一个思考问题角度的脑洞。</p>
<p>就像我的室友打开了「艺术创业」的脑洞一样，他可以从各种电影中吸取到电影拍摄的专业知识，而我却对此完全不会有感受。同样，我使用一个 App 可以带来技术实现上的思考和提升，而我的室友却完全不可能有这方面的感受。</p>
<p>每一个脑洞的打开，都代表着一种新的观察世界的视角，以及这个视角下的思考、学习和积累。iOS 开发者由于需要大量地接触到终端用户，产品原型以及 UI 设计，本来可以学习和积累出大量的产品设计、交互设计 和 UI 设计的知识，但大部分 iOS 开发者在面对产品稿的时候，却只知道思考这个功能应该如何实现。这些 iOS 开发者只打开了技术实现的脑洞，无论他们做多少个 App，他们也无法得到产品设计上的提升。</p>
<p>另外有一些 iOS 开发者，他们喜欢和产品经理聊天，了解产品稿背后的设计意图，他们还会反馈给 UI 设计师一些 iOS 下的视觉规范。在一些产品设计非常难以实现的时候，他们会站在产品经理的立场上，提出不损害产品意图，又有更容易实现的技术折中方案。这些 iOS 开发者，不但打开了技术实现的脑洞，也打开了产品设计，视觉设计的脑洞。每一次 App 的开发过程，他们除了能够提升开发能力，还能提升产品设计和视觉设计能力。</p>
<p>服务器端的同学在这一点上，会吃亏很多，因为服务器端的同学大多数不需要接触 UI 稿，产品稿方面，他们的工作因为不涉及交互细节，所以也很容易忽视产品实现的细节。相对来说，他们更难以打开产品设计，视觉设计的脑洞。</p>
<h2 id="u611F_u53D7"><a href="#u611F_u53D7" class="headerlink" title="感受"></a>感受</h2><p>每一个脑洞都代表着一种新的思考问题的角度。我现在管理小猿搜题产品技术团队，我开始越来越关注大家的工作流程，沟通方式是否顺畅，希望让每一个人都能舒服地工作，高效地产出。这个时候，我打开了管理的脑洞，我开始注意到大家的协作方式，注意到非正式领导的组织过程，注意到跨组协作的效率问题，注意到细节问题的处理过程。我会观察和思考这些事情，甚至会尝试给组织加入一些规则或增加一些沟通来改善一些问题，这想在这个团队中，很少有人会像我一样关注这些问题，所以他们也很难像我一样积累出团队管理经验。</p>
<p>当你理解了这件事情之后，你就可以打开更多的脑洞了，因为很多经验的积累，并不真正需要你全职去做，而只要你仔细观察就可以了。比如你可以打开 CTO 的脑洞，看看公司的 CTO 是如何管理整个技术团队的，你还可以打开 CEO 的脑洞，看看 CEO 在哪些问题上会向员工沟通，前几天，<a href="http://www.yunweipai.com/archives/9363.html" target="_blank" rel="external">《李大学：CTO，应该像 CEO 一样思考》</a> 其实讲的也是这个道理。你甚至可以打开餐馆老板的脑洞，观察公司楼下的各种餐馆的经营模式，哪些最后死掉了，哪些最后成功了。</p>
<p>作为一个普通 iOS 开发者，我们更应该打开的是自己上司的脑洞，看看你的老大（他或许是一个 iOS 团队负责人）是如何负责一个团队的。这样，你也可以学习到他需要哪些信息，他会怎么决策，从而有效地和他进行沟通，让他对你的工作满意。</p>
<h2 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h2><p>打开脑洞这个叫法是我自己发明出来的，你喜欢这个思考方式吗？</p>
<p>一旦你被我打开了「打开脑洞」的脑洞，你就停不下来了，好好享受从新视角观察世界的乐趣吧！</p>
<p>祝大家玩得开心！</p>
<p>如果你感兴趣，这儿还有我的另一个脑洞：<a href="/2016/07/20/programming-worlds-farmer-and-god/">《软件开发中的上帝模式与农民模式》</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/open-brain.jpg">
<h2 id="u804C_u4E1A_u75C5"><a href="#u804C_u4E1A_u75C5" class="headerlink" title="职业病"></a>职业病</h2><p>我的大]]>
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[人格化的公司]]></title>
    <link href="http://blog.devtang.com/2016/09/04/company-with-personality/"/>
    <id>http://blog.devtang.com/2016/09/04/company-with-personality/</id>
    <published>2016-09-04T13:19:39.000Z</published>
    <updated>2016-09-04T13:19:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u4F01_u4E1A_u7684_u54C1_u724C_u5F62_u8C61_u4E0E_u7BA1_u7406_u8005_u7684_u54C1_u724C_u5F62_u8C61"><a href="#u4F01_u4E1A_u7684_u54C1_u724C_u5F62_u8C61_u4E0E_u7BA1_u7406_u8005_u7684_u54C1_u724C_u5F62_u8C61" class="headerlink" title="企业的品牌形象与管理者的品牌形象"></a>企业的品牌形象与管理者的品牌形象</h2><p>在过去，企业总是希望将企业品牌形象与企业的管理者的品牌形象区分开，因为一个长久的百年老店可能经历多次管理者的变更。IBM 就是一个例子，我们不记得 IBM 的 CEO，但是 IBM 在企业服务方面高质量的品牌形象还是深入人心的。</p>
<p>传统的企业这么做无可厚非，因为他们不希望企业的管理者由于健康或别的原因，给企业带来负面影响。在传统企业盈利模式和管理方式稳定的时期，聘用一个 “职业经理人” 一样的 CEO，对于企业来说风险也不大。</p>
<p>但是，现在的企业发展速度已经远远超过了过去。</p>
<h2 id="u5E74_u8F7B_u516C_u53F8_u7684_u5FEB_u901F_u5D1B_u8D77"><a href="#u5E74_u8F7B_u516C_u53F8_u7684_u5FEB_u901F_u5D1B_u8D77" class="headerlink" title="年轻公司的快速崛起"></a>年轻公司的快速崛起</h2><p>2005 年：全球市值最大的公司分别是通用电气，美孚石油，微软，花旗，沃尔玛，BP 能源，辉瑞，美洲银行，强生，汇丰银行。</p>
<p>到了 2015 年，全球市值前十公司：苹果，谷歌，微软，伯克希尔，美孚石油，亚马逊，Facebook，通用电气，强生，富国银行。从中我们可以看到像 Facebook 这类公司的快速崛起。</p>
<p>Facebook 2004 年成立，淘宝 2003 年成立，这些公司都花了不到 10 年的时间，就成为了估值上千亿美金的公司。飞速的发展速度，使得大家不再担心企业创始人的个人魅力与企业的品牌形象融合在一起。</p>
<p>而且，企业管理者的个人魅力和企业本身的品牌形象其实是有相互影响的叠加作用，当企业管理者在公众中具有光环效应时，对企业品牌本身也是一种无形的帮助。在现在的中国公司中，各种企业的创始人都会注意使用个人的魅力或人格，来给自己的公司产品宣传背书。</p>
<p>比如锤子手机的罗永浩，360 的周鸿祎，小米的雷军，乐视的贾跃亭。对于他们来说，企业的成功至关重要，能够有一个核心的 “代言人”，是更加利于产品宣传的。这个趋势也就是近年来才开始盛行，反观老牌的中国公司 BAT 以及门户网站网易搜狐新浪，他们的创始人都要低调得多。也就是说，创新型企业的快速发展，使得越来越多创业公司采用这样的策略。</p>
<h2 id="u60C5_u611F_u5316_u8BA4_u77E5"><a href="#u60C5_u611F_u5316_u8BA4_u77E5" class="headerlink" title="情感化认知"></a>情感化认知</h2><p>从用户认知方面，一个具象化的人格形象，是更加有利于消费者对于企业产生认知，并且生成情感联系的。大家对于罗永浩的认知是一个理想主义者，那么就可能会为 “情怀” 买单。很多消费者的消费都是 “非理性” 的，一款产品所传达出来的任何情感（例如环保，坚持不懈，创新精神，极客精神）都会吸引到消费者，让他们购买产品而表达和宣泄自己的情感。</p>
<p>人格化的企业形象，会更加利于情感联系的建立。传统企业会选择明星代言的方式来做这方面的事情，但是明星可能会过气或者有负面新闻，都会对企业带来影响。一家新成立的创业公司请明星代言需要付出巨大成本，从性价比来说，让公司创始人给公司 “代言” 会更加经济和有效。所以我们甚至看到了聚美优品的陈欧为自己产品 “代言” 的营销方案。</p>
<h2 id="u4EBA_u683C_u5316_u7684_u65B0_u516C_u53F8"><a href="#u4EBA_u683C_u5316_u7684_u65B0_u516C_u53F8" class="headerlink" title="人格化的新公司"></a>人格化的新公司</h2><p>在可以预见的未来，创业公司的创始人会更加注意使用社交媒体来树立个人品牌，然后利用个人品牌为自己的产品带来竞争力。今年正好是自媒体爆发的元年，我们看到了更多个人在垂直领域创业的故事，<a href="http://weibo.com/u/149691505" target="_blank" rel="external">罗振宇</a>，<a href="http://weibo.com/wenyi" target="_blank" rel="external">文怡</a>，<a href="http://weibo.com/u/3688920760" target="_blank" rel="external">凯叔</a>，<a href="http://weibo.com/cuiyutao" target="_blank" rel="external">崔玉涛</a>，他们的公司都发展得很快。</p>
<p>所以我相信，在未来的企业中，创始人的个人品牌会被进一步强化，而那些拥有个人品牌的创业者，除了在竞争中占据巨大的品牌宣传优势外，也能在消费者的心智中建立起一个「人格化」的公司形象。</p>
<p>让我们拭目以待。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u4F01_u4E1A_u7684_u54C1_u724C_u5F62_u8C61_u4E0E_u7BA1_u7406_u8005_u7684_u54C1_u724C_u5F62_u8C61"><a href="#u4F01_u4E1A_u7684_u54C1_u]]>
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我们身边的技术人生 -《技术人创业攻略》]]></title>
    <link href="http://blog.devtang.com/2016/09/01/dev-level-up-stories/"/>
    <id>http://blog.devtang.com/2016/09/01/dev-level-up-stories/</id>
    <published>2016-09-01T14:02:34.000Z</published>
    <updated>2016-09-01T14:02:34.000Z</updated>
    <content type="html"><![CDATA[<p>在这个信息爆炸的移动互联网时代，我们身边总会有一些技术圈的大牛出现，介绍他们的文章大多是以技术角度，描述他们的作品多么牛逼，而我们往往除了膜拜也无从知晓这些技术人的成长经历。</p>
<p>带着写一些「有趣」的技术人故事的初心，《技术人创业攻略》的作者张兰开始了她的乌托邦式的旅程。她从 2013 年开始，从 SegmentFault 的创始人高阳，开始了她的访谈之旅。当时张兰并没有工作，每篇访谈耗费她大量精力，最后都免费放到网上供大家阅读。</p>
<p>带着这样的初心，她一直坚持完成了 37 位不同年龄，不同技术领域，不同背景的技术人。在她的采访稿中，她以技术人的真实背景出发，试图揭示出这些人成功的原因。</p>
<p>这些被他采访的技术人里面，包括 SegmentFault 的创始人高阳，七牛云存储的创始人许式伟这些创业公司的 CEO，也包括擅长运营的前端领域的一姐田爱娜，也有深入开源社区，成为 Linux 内核核心贡献者的吴峰光，还有资本领域的天使投资人杨轩。我也有幸在一次阿里举办的技术沙龙上认识了她，继而成为了她笔下的一个技术成长故事。</p>
<p>因为张兰写的这些故事都很有趣，于是有出版社愿意将它出版成书，这就是《技术人创业攻略》。但是张兰的性格里面有着极强的「处女座」式的追求完美的情结。所以这本书整整花费了她将近一年的时间进行重新的内容梳理和再采访。</p>
<p>仅仅为了封面的设计，张兰就多次因为不满意而调整，最后还是找到了西乔设计封面（下图）才满意。此时西乔的公众号已经成为几十万粉丝的大号了，如果你还没有看过程序员的漫画，一定得关注一下：「神秘的程序员们」（coderstory）。</p>
<img src="/images/dev-level-up.jpg">
<p>最终在上个月，《技术人创业攻略》终于出版了。不过在本书出版的时候，张兰已经和她老公旅居到了加拿大，开始了一段新的生活。而张兰此时开始学习上了 JavaScript，打算成为了一个前端工程师。她的第一个小作品，是用 DFS 生成的一个迷宫，我专门看了看她的代码：<a href="https://github.com/Graciazl/RandomMazeGame/blob/master/script.js" target="_blank" rel="external">https://github.com/Graciazl/RandomMazeGame/blob/master/script.js</a>，整体的代码风格和结构完全不像是一个初学者。我想这就是我认识的张兰最好的描述：做什么事情都那么认真。</p>
<img src="/images/zhanglan-maze.jpg">
<p>最后我得到了张兰的授权，为大家附上《技术人创业攻略》书中节选的一篇内容。这是书中唯一一位受访的外国人：Dave Thomas，《程序员修炼之道》的作者，让我们看看在张兰笔下的大神是如何成长的。</p>
<hr>

<h2 id="Dave_Thomas_uFF1A_u751F_u547D_u4E0D_u606F_uFF0C_u7F16_u7A0B_u4E0D_u6B62"><a href="#Dave_Thomas_uFF1A_u751F_u547D_u4E0D_u606F_uFF0C_u7F16_u7A0B_u4E0D_u6B62" class="headerlink" title="Dave Thomas：生命不息，编程不止"></a>Dave Thomas：生命不息，编程不止</h2><p>Dave Thomas，是一位从业近 40 年的大神级人物，他和 Andy Hunt 于 1999 年合著的《The Pragmatic Programmer》（中文译名《程序员修炼之道》），是历史上最畅销的开发指南书籍，曾获得 Jolt 大奖，影响深远。Dave 是敏捷宣言的 17 位发起人之一，Ruby 语言的支持者和传播者，正是他对 Ruby 语言的传播，使 Ruby 逐渐成为与 Perl，Python 齐名的语言。2003 年，他和 Andy Hunt 成立了 The Pragmatic Bookshelf 出版公司，致力于出版软件开发相关书籍，并用开发软件的方式实现了图书出版业的重大突破。</p>
<p>Dave Thoma 是一位令人尊敬的大师，更是一位伟大的程序员。在近 40 年的从业生涯中，他从未间断过编程，并时刻保持旺盛的好奇心和探索新技术的热情。在 Ruby Conf China 2013 大会上，Dave 接受了技术人攻略的访谈邀请，并在回信中 100% 地肯定了技术人攻略 “传递技术热情” 的理念：</p>
<p>“I think your ideas about spreading passion are 100% correct. I would love to help spread this message.”</p>
<p>希望大师的访谈可以鼓励更多还在奋斗的程序员，技术人攻略也会继续把这种对技术的热爱传递给更多的人。</p>
<blockquote>
<p>技术人攻略：您从什么时候开始接触编程？编程带给了您什么样的乐趣？在不断超越自我的过程中，是否遇到过什么困难，是否曾有过想放弃的时刻呢？</p>
</blockquote>
<p>我初次接触编程是在 1972 年，那时我还在英国上高中。有一部分人提前完成了考试，在学校没有别的事情可做。正巧校园对面的科技学院开设了编程课，于是我们申请了参加这个一周两次的课程。</p>
<p>我最初打算学数学专业，但当我开始编程，我慢慢爱上了它。</p>
<p>那时候我用 Basic 语言，将代码敲到纸带上，通过一台 110 波特的调解器将数据传到大型机上运行。虽然如此麻烦，但我发现编程十分符合我的大脑的运作方式——我喜欢这种创造性和精确性兼备的体验。</p>
<p>从那时开始，我从未间断过编程。我十分确定——除非是在度假的时候，我生命中的每一天都离不开写代码。</p>
<p>我也常常会有感到艰难的时候，但每次考验过去之后，你的技艺都将更上一层楼。所有值得做的事情都是困难的，但克服这些挑战不仅会让你更强大，还会让你变得更加投入。</p>
<blockquote>
<p>技术人攻略：我们处在一个快速变化的时代，新的技术层出不穷，程序员应该如何保持和这个世界同步，持续提升自己的竞争力？</p>
</blockquote>
<p>想要跟上技术更新的速度越来越难。当我开始编程的时候，主要通过阅读书籍和杂志了解进展，但现在几乎每天都有新概念出现。</p>
<p>但事实上很多的新事物只是人们对旧东西的再发明。我们行业里的许多人，眼光只看向将来，对计算机的历史却知之甚少。这些人想要创造东西（当然是好的），但他们并不知道自己想做的东西在 20 或 30 年前已经实现了。</p>
<p>正因为如此，许多新生成的事物其实并没有那么新。对我来说，要跟上潮流就变得简单了，因为看到它们就会让我想起 “啊，这和 X 很像呢”。</p>
<p>但同时，也确实有一些不错的创新。我每个月总有那么一到两次，会遇到很有意思的东西，让我有兴趣去尝试一下。阅读技术内容是有趣的，但只有通过尝试才能认识得更加深入。</p>
<p>这很花时间，但对于程序员来说这种投入非常重要。如果不这么做，很快我们就会被淘汰。</p>
<blockquote>
<p>技术人攻略：在大公司里，职位被划分得很细，例如前端、后端、运维、数据库等，程序员被固定在了公司设定的职位上，您认为程序员应如何提升技术的广度和深度？</p>
</blockquote>
<p>专业化分工属于昆虫世界。真正能够改变世界的人：他们具备更加广泛的能力，并能将不同的技术结合起来创造价值。</p>
<p>我认为很多公司并没有意识到这点，他们更乐于创造层级制度和把员工限制在某个职位上。</p>
<p>但是也有些不一样的公司，懂得通过制定目标和提供指导让程序员有最好的产出，而不是监督所有的细节。这些公司理解一个优秀的程序员可以同时胜任数据库设计、规划应用部署，也许还喜欢解决技术支持方面的问题。</p>
<p>我鼓励年轻程序员获取一些在不同的公司工作的经验，以寻找适合自己的工作方式。例如试试在大公司和在创业团队工作有什么不同，甚至尝试下独自工作。一旦你了解了自己适合的方式，就可以找到或者创造出合适的职位，让自己做得更好。</p>
<p>作为一名员工，很容易抱怨自己的公司，或者怀有这样的想法 “我就是一个普通人，没有能力改变什么”。但事实上，你有责任作出改变——让事情变得更好。这种责任不仅是对公司的，而且也是对自己的。看看你是否能让公司有所改变，如果无法改变现状，那么你应该换一个更适合自己的环境。</p>
<blockquote>
<p>技术人攻略：《The Pragmatic Programmer》影响了非常多的人，如果这本书出修订版，您打算做哪些改变？今天，一个讲求实效的程序员正在做些什么？</p>
</blockquote>
<p>我和 Andy Hunt 常常会讨论这件事。实际情况是，虽然书上的案例看上去古老了一点，但背后的概念仍然很适用。无论你是做 C++ 还是 Javascript 编程，DRY（注：DRY 即 Don’t Repeat Yourself，不要重复自己）原则仍然适用:)</p>
<p>我个人认为可以修改或者去掉一些小的 tips，但没什么大问题。</p>
<p>如何做一个高效的程序员：do what works, and work at what to do。“do what works” 意味着你应该不断问自己 “我正在做的事情有什么样的价值？”，每天都尝试寻找提升所做事情价值的方法。“work at what to do” 意味着要时常回顾，从全局角度看问题，并且寻找改进工作的新方法。</p>
<blockquote>
<p>技术人攻略：您是一名技术高手，又拥有自己的软件公司，您觉得程序员应该创业吗？程序员创业有哪些优势和劣势？</p>
</blockquote>
<p>这是一个很棒的问题，但我也还不知道答案。</p>
<p>我的一个弱点在于我喜欢让事情保持简单——我认为大多数程序员都喜欢这点。但现实世界——公司运作的世界，并不简单。我不得不克服把事情过度简单化的诱惑，因为我知道这样会让自己错失机会。</p>
<p>我认为程序员从事商业，最重要的强项在于我们懂得事物的关系如何。管理代码的原则，同样可以用在管理公司上，这也是 The Pragmatic Bookshelf 这家出版公司成功经营的原因之一。我们在一开始的时候，并不知道图书出版公司该如何运行，所以我们采用了管理软件公司的方式去产出图书，而不是产出代码。结果，我们将版本控制、持续系统构建，以及全自动化等方式运用在了商业运营的方方面面。其它出版商无法做到这些，我们对于出版行业的无知成为了最大的优势。</p>
<blockquote>
<p>技术人攻略：在 Ruby 大会上听说您最近在关注一门新语言 Elixir，它为什么吸引您？您会像推广 Ruby 一样去推广这门语言吗？它是否代表了接下来的技术流行趋势？</p>
</blockquote>
<p>我非常确信未来的世界属于并行和分布式，五年之内，还要编写一个从头到尾顺序化执行的程序，这将是一个笑话。</p>
<p>但同时我们并没有拥有真正可以让我们创建分布式和并行系统的工具，用 Ruby 或 Java 写并行代码很容易出错，用 Javascript 也同样痛苦。</p>
<p>Erlang 诞生差不多 25 年了，这种语言的目的就是要进行分布式和并行编程，就是解决大规模和可靠性问题——在后者的环境中，要保持代码一直处于运行状态，即使代码在升级时也是如此。</p>
<p>Elixir 则没有这个问题，这种语言看上去跟 Ruby 很像，非常易于理解和编写。但是它运行在 Erlang 虚拟机上，这意味着它可以获得 Erlang 的一切好处。同时又可以胜任 Erlang 完成不了的任务，它有很强的元编程能力、宏和协议等方面也不错。</p>
<p>Elixir 会统治世界吗？可能不会。但我认为它代表了未来的方向。学习 Elixir 的过程可以让我理解未来的编码方式。五年后我可能不会用 Elixir，但我十分确信我会用一些类似的语言，我通过 Elixir 学到的东西仍然可以帮助我。</p>
<p>这听上去好像是我认为 Elixir 不会流行，但其实我不这么想。到目前为止，Elixir 是我们所拥有的最好的语言和运行时之一。当我没有为（由 Ruby 编写的）已有系统写代码的时候，我会用 Elixir 开发，我十分喜欢它。</p>
<p>我鼓励其他程序员试试 Elixir(或者其它类似的语言)，我总是鼓励程序员去学习更多的东西。</p>
<blockquote>
<p>技术人攻略：在移动互联网时代，产品的开发模式和以前互联网时代相比，有哪些新特点？</p>
</blockquote>
<p>我认为程序员面对的世界和五年前相比有了显著的变化。浏览器基本上还和 IBM 将老式 3270 终端连到主机上的应用一样——你向它发送数据，用户输入一些东西，然后浏览器给出回应。还是以服务器为主。我知道：客户端在不断加入很多令人头痛的东西，比如 JavaScript 应用什么的，但是整体架构仍然一样。我认为浏览器技术基本上已经进入死胡同。我观察身边的人——他们在手机和平板上使用 App，只有在必须用到浏览器的时候才会用一下，移动世界是以用户为核心，而非以服务器为核心的。</p>
<p>在移动 App 上，客户端掌管一切，服务器仅仅作为资源提供方。这要求程序员掌握一些新的技能和技术支持这种结构。在客户端，我们需要通过编写复杂的，异步的应用，并且将这些应用运行在一系列不同的设备上（不仅是手机和平板）。在服务器端，我们需要从 Rail 风格的应用转向更灵活、更多以联合方式运行的架构。（这正是 Elixir 令人兴奋的原因之一。）</p>
<blockquote>
<p>技术人攻略：去年的 Qcon China 上，您谈到了敏捷的腐化和到底什么是敏捷，有没有哪些软件项目领域，是敏捷开发模式不适用的？</p>
</blockquote>
<p>你的问题认为，“敏捷” 是一种东西。</p>
<p>真相是，“敏捷” 并不存在。它不是一种 “东西”，不是一个名词。人们是把它当成一个名词开始用起来的，但是他们并不理解背后的含义。</p>
<p>“敏捷” 不是一种东西，敏捷是一个形容词——它描述了一种东西。你可能有一个敏捷的团队，或者一种敏捷的过程，但你却从来不是 “敏捷”。</p>
<p>这是什么意思？这意味着那些向你硬推 “敏捷” 这个名词的人在撒谎，因为 “敏捷” 是买不来的。</p>
<p>相反，敏捷是因人而起的——它来自于那些希望把事情做得更好的个体。这些个体观察如何做事，并寻找改进事情的方法。Kent Beck 说这需要勇气，他说得没错。每当你尝试做出改进，你都在尝试改变现状，你将直面风险，你挑战了那些和你共事的人，他们也会用挑战来回敬你。</p>
<p>但是，我认为：在任何环境下，这些挑战和相关的讨论都是合适的。</p>
<blockquote>
<p>技术人攻略：您接触过中国的程序员吗？您觉得他们和西方的程序员有哪些区别？</p>
</blockquote>
<p>我喜欢来中国的原因之一，就是可以和这里的程序员交流。</p>
<p>这次的中国之行，我们在一家创业孵化咖啡馆（注：车库咖啡）渡过了非常愉快的一段时光。大家的活力和热情让我和我的妻子非常震惊，她甚至还为此写了一一篇博客。</p>
<p>西方的程序员也拥有这样的热情，但我在中国遇到的程序员表现出更多东西。或许是因为中国程序员要在更困难的环境下工作，又或许是因为中国的市场正开始爆发。不管是因为什么，我总能从中国程序员身上感到更多能量。</p>
<p>中国同时还有另外一类程序员，我在和他们谈话的过程中注意到，他们把工作当成任务。或许在家庭的推动下进入这个可以获得一份 “好” 工作的行业，或许想在一个大型机构里寻求安全感。不管是出于什么原因，这类程序员身上都缺乏激情，缺少一份对他们所作事情的热爱。这令人伤心，因为写程序真的是一件非常有成就感，非常让人满足的事。我建议这些程序员们看看我妻子的那篇博客上的照片，问问自己是否也愿意加入其中，是否愿意向桌子对面的人分享自己的新想法？<br>他们可以做到——任何人都可以做到。</p>
<p>采访时间：2013 年 11 月 7 日</p>
<h2 id="u9644_uFF1ADave_Thomas__u59BB_u5B50_u7684_u535A_u5BA2_u6587_u7AE0_u2014_u2014The_Future"><a href="#u9644_uFF1ADave_Thomas__u59BB_u5B50_u7684_u535A_u5BA2_u6587_u7AE0_u2014_u2014The_Future" class="headerlink" title="附：Dave Thomas 妻子的博客文章——The Future"></a>附：Dave Thomas 妻子的博客文章——The Future</h2><p>晚餐过后，大会组织者将我们带到了一个创业孵化器——一家大型的互联网咖啡馆，年轻的中国技术创业者们在这里工作、和投资人会面、推销想法、编写代码——这些事情都同时进行。这一切简直是太赞了！星期天晚上的 11 点，我们走进了这个灯光昏暗、大堂几乎没有家具的路边办公室。穿过后门，上了楼梯，直接加入了充满创业热情的人群。我们比房间里的人年长得多，他们有着令人惊叹的能量，几乎所有的人都在参与创业项目。他们出来聊天，碰撞想法，并马上付诸实践。Dave 被包围了，起先，我以为他们是在寻求某种投资。但并不是——我彻底错了。我们听到，并不断听到，想投资他们的人比他们需要的多得多。他们想了解 Dave 对自己创业项目的看法，他的祝福和他的批评——他们十分投入，期待成功。他们想有所成就，而且他们每个人都有非常棒的，独特的事业。</p>
<p>在一个角落里有一台 3D 打印机——正在做一个脊椎。另一个大的角落作为演示区域，配置好了笔记本的投影。后面的墙上是一组技术书架（他们向我们保证，有许多 Pragmatic 出版的书）。这里的环境是随性而自然的——桌椅随意摆放，人们可以根据讨论需求随意组合。</p>
<p>这些年轻人了解各个层面的知识，不仅仅是技术上的。他们理解在开曼群岛上注册公司、天使投资以及 IPO，3D 打印机旁的电脑连着 Kickstarter。这些人聪明、热情，并且很努力，一点也看不到懒惰、傲慢以及理所当然的态度。<br>还有来自香港和台湾的年轻人，他们认为中国大陆才是做事的地方。</p>
<p>我对此毫不怀疑——他们说得很对。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在这个信息爆炸的移动互联网时代，我们身边总会有一些技术圈的大牛出现，介绍他们的文章大多是以技术角度，描述他们的作品多么牛逼，而我们往往除了膜拜也无从知晓这些技术人的成长经历。</p>
<p>带着写一些「有趣」的技术人故事的初心，《技术人创业攻略》的作者张兰开始了她的乌托邦式]]>
    </summary>
    
      <category term="books" scheme="http://blog.devtang.com/tags/books/"/>
    
      <category term="books summary" scheme="http://blog.devtang.com/categories/books-summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈程序员的软技能]]></title>
    <link href="http://blog.devtang.com/2016/08/22/soft-skills/"/>
    <id>http://blog.devtang.com/2016/08/22/soft-skills/</id>
    <published>2016-08-22T13:49:52.000Z</published>
    <updated>2016-09-04T14:32:31.000Z</updated>
    <content type="html"><![CDATA[<p>最近读到一本有意思的书，叫：《软技能：代码之外的生存指南》，这是一本相当跨界的书，内容除了介绍了技术人的职业发展之外，还涉及了自我的营销、学习方法、生产力、健身、甚至还包括理财。应该说，每一个章节都是非常有意思的，值得每一个程序员学习的内容。</p>
<img src="/images/soft-skills-mindnode.jpg">
<p>《软技能》一书的内容分为以上这些章节，我也按这些章节讲讲自己的感悟吧。</p>
<h2 id="u804C_u4E1A"><a href="#u804C_u4E1A" class="headerlink" title="职业"></a>职业</h2><p>职业一章介绍了程序员的面试，晋升，离职，远程办公，自由职业，以及创业。不管做什么事情，专业性总是第一要点。就像书中写的那样，我们应该成为「专业人士」，这就要求我们对所做的工作始终精益求精。这其实与行业无关，职业精神在任何行业都应该俱备。</p>
<p>在程序员这个行业，我们的职业精神在于追求代码的美，这包括架构的可扩展，命名的规范，合理的注释，合理的设计模式。但其实，我们最最欠缺的职业精神是：按时发布产品。</p>
<p>我们总有无数的借口：未知的技术挑战，没有遇到过的 Bug，产品需求的变更，相关联调人员的问题，但是好的程序员，总是能够在各种风险发生时，通过自己的努力保持按时上线。</p>
<p>在这一点上，越是大公司的程序员，反倒由于大公司病的影响，职业精神就越差。</p>
<h2 id="u81EA_u6211_u8425_u9500"><a href="#u81EA_u6211_u8425_u9500" class="headerlink" title="自我营销"></a>自我营销</h2><p>100 个程序员里面，有 99 个不会营销，这还是乐观的说法。而我就是那个稍微会点营销的人，我从中享受到的红利已经多得超过我实际的付出了，弄得我自己都不好意思。我常常给别人说，我不是大牛，我只是喜欢分享而已。不过话说回来，一般喜欢分享的人水平都差不到哪儿去，为什么呢？因为他如果分享的内容有问题，就会被人指出来，那么他就会很快得到纠正。他如果分享的内容没问题，就会被高手看到找上门来交流，那么他就多了一个高水平的相互学习讨论的人。所以对于分享者来说，分享行为总是好事。</p>
<p>在中国如何做自我营销呢？基本上做到两点就可以了：</p>
<ol>
<li>写技术博客。</li>
<li>发技术微博。</li>
</ol>
<p>写技术博客好难啊怎么办？可以从翻译国外博客开始。发技术微博好难啊怎么办？可以从转发技术微博开始。看看 JSPatch 的作者 bang，人家从 10 年前就写博客了，能写不好吗？</p>
<p>切忌把时间花在混各种圈子，包括 QQ 群、微信群、各种技术论坛，这对自我营销效果基本没有，而且还很花费时间。</p>
<h2 id="u5B66_u4E60"><a href="#u5B66_u4E60" class="headerlink" title="学习"></a>学习</h2><p>很多人问我：「唐巧，我参加完培训班找不到工作怎么办啊」，因为移动互联网的泡沫，今年 iOS 新人太多，我也不知道怎么办，但是学习肯定不是参加完培训班就结束了的。</p>
<p>程序员必须具备自我学习的能力，而自我学习的能力第一步，就是书中第 27 章讲的「学习如何学习」，我们把它叫做元学习吧。一个学习者，应该俱备一种通用能力，就是遇到一个新知识的时候，能够有一套方法，能够迅速地学习掌握这门新知识。</p>
<p>在这个快速变化的时代，编程语言以及开发生态都在不停迭代升级，像 iOS 开发更是经历着从 Objective-C 向 Swift 的巨大迁移。处于时代中心的我们，没有元学习能力，如何获得竞争力？难道你工作之后，还要给企业老板说：我要请三个月假报一个培训班，学习 Swift ？</p>
<p>回到刚刚说到的问题，如果你参加完培训班找不到工作，只有更加努力地多积累 iOS 开发知识，尝试让自己的能力变得更强，可以尝试自己接个外包，或者自己写一些开源组件，或者找一份实习，都是一些可能的方法。iOS 新人的市场竞争非常激烈，除了自己比别人花更多时间和精力之外，没有什么捷径。</p>
<h2 id="u751F_u4EA7_u529B"><a href="#u751F_u4EA7_u529B" class="headerlink" title="生产力"></a>生产力</h2><p>作者介绍了许多办法提供自己的工作效率，里面也提到了我以前介绍过的 <a href="/2016/04/12/tomato-time-management/">番茄工作法</a>。</p>
<p>我自己对于生产力的理解在前两天的 <a href="/2016/07/20/programming-worlds-farmer-and-god/">《软件开发中的上帝模式与农民模式》</a> 文章中也提到了，效率方面的生产力，其实都是提升自己的农民模式。</p>
<p>本书中提到的任务分解，计时，培养习惯都是不错的实践方法。</p>
<h2 id="u7406_u8D22"><a href="#u7406_u8D22" class="headerlink" title="理财"></a>理财</h2><p>本章中我们看到了一个外国程序员对于买房和期权的理解。我个人感觉和中国的国情还是有一些差距。</p>
<p>在中国，我和小伙伴们在过去 5 年中很遗憾地发现，工资还没有房价涨得快。身边好几个朋友经历了自己买的房子暴涨几百万的情况，还是挺吓人的。</p>
<p>期权方面，国内的国情和国外也不一样，小道信息的作者 Fenng 最近似乎也在这方面遭遇了一些困惑，我其实之前也在这方面遇到一些问题。关于期权，稍后我也会另外撰文分享我的观点。</p>
<h2 id="u5065_u8EAB"><a href="#u5065_u8EAB" class="headerlink" title="健身"></a>健身</h2><p>有人说程序员是最适合当老公的，因为社会关系简单，薪水高，死得早。。。。</p>
<p>健身这件事情被无数人挂在嘴边，却坚持不下来。其实这件事情还是看个人对于延迟满足感的控制，像我前段时间，就坚持了四个月健身，不但学会了自由泳，而且达到了一次游 1000 米。我现在 1000 米的成绩是 29 分钟，我打算继续坚持下去，每个月减少 1 分钟。</p>
<h2 id="u7CBE_u795E"><a href="#u7CBE_u795E" class="headerlink" title="精神"></a>精神</h2><p>作者在本章中讲了一些积极的人生观，嗯，其实就是鸡汤。身子虚的同学可以补补。</p>
<h2 id="u6700_u540E_uFF08_u6D3B_u52A8_u5DF2_u7ED3_u675F_uFF09"><a href="#u6700_u540E_uFF08_u6D3B_u52A8_u5DF2_u7ED3_u675F_uFF09" class="headerlink" title="最后（活动已结束）"></a>最后（活动已结束）</h2><p>送书活动来啦，为了庆祝人民邮件出版社异步社区成立一周年，iOS 开发与异步社区联合发起评论赠书活动。</p>
<p>赠书规则如下：评论留下你关于软技能的想法，我将从评论的读者中选出 5 位读者赠送此书。</p>
<p>本次活动最终获奖的是：Thank立言、Julin、yeafel、OSong、破船。选择他们的理由包括：留言质量较高、经常与我互动留言（微信后台现在可以查到大家的互动次数）。奖品有限，希望没有获得的小伙伴别在意～</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近读到一本有意思的书，叫：《软技能：代码之外的生存指南》，这是一本相当跨界的书，内容除了介绍了技术人的职业发展之外，还涉及了自我的营销、学习方法、生产力、健身、甚至还包括理财。应该说，每一个章节都是非常有意思的，值得每一个程序员学习的内容。</p>
<img src="/]]>
    </summary>
    
      <category term="books" scheme="http://blog.devtang.com/tags/books/"/>
    
      <category term="books summary" scheme="http://blog.devtang.com/categories/books-summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[小青和他的 RxSwift 课程]]></title>
    <link href="http://blog.devtang.com/2016/08/13/xiaoqing-and-rxswfit-course/"/>
    <id>http://blog.devtang.com/2016/08/13/xiaoqing-and-rxswfit-course/</id>
    <published>2016-08-13T03:31:11.000Z</published>
    <updated>2016-08-13T03:31:11.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://7xil0e.com1.z0.glb.clouddn.com/teacher/57908b8961854.png" alt=""></p>
<p>第一次认识小青（<a href="http://weibo.com/u/2314535081" target="_blank" rel="external">@靛青K</a>），是在他与梁杰一起创办的 <a href="http://t.swift.gg/" target="_blank" rel="external">T 沙龙</a>聚会上。当时小青邀请到了代码家，给大家介绍了函数式编程的一些内容。T 沙龙的模式很有意思，它强调纯线下的、小范围的、免费的交流。这与现在这个强调规模与经济的互联网时代格格不入，但是不可否认的是，小青和梁杰办得很成功。就在上一次分享会中，小青邀请到了 <a href="http://weibo.com/u/2157980617" target="_blank" rel="external">@txx</a> 和 h4x 为大家分享逆向，特别是 txx 现象从头到尾演示一个 App 被逆向的过程让我对逆向的实践有了更多的了解。</p>
<p>沙龙的茶歇期间的闲聊，我才了解到小青还未大学毕业，但是他已经在 Enjoy 开始了他的第二份实习，而这份实习中，他将会用 RxSwift 重构 Enjoy 的众多模块。我私下问他为什么选择 Enjoy，他毫不犹豫地说：「因为可以用 RxSwift 呀！」。其实这也从一个侧面反映出，业界对于 RxSwift 以及比 RxSwift 更早的 ReactiveCocoa 都处于观望的心态，真正勇于尝试的并不多。</p>
<p>为了学习和推广 RxSwift，小青也花了大量的精力，比如他发布了大量 RxSwift 的教程在 <a href="http://t.swift.gg/t/rxswift-course" target="_blank" rel="external">SwiftGG网站</a>  和<a href="https://medium.com/@DianQK" target="_blank" rel="external">他的博客</a> 上。今年初，小青也成为了 GMTC 2016 全球移动技术大会 Swift 专场讲师，为大家分享了 RxSwift。另外他也在编写一本 RxSwift 的书，预计年底将会出版。</p>
<p>与此同时，小青也在 StuQ 开设了一门 RxSwift 在线直播小班课，这个课程当前处于报名阶段，预计 8 月下旬开课。这个在线直播课程限 60 人，感兴趣的同学可以查看这里的<a href="http://www.stuq.org/my/courses/study/1062" target="_blank" rel="external">详细介绍</a>，你可以说这是一个广告，也可以说这是一个推荐，反正我自己是报名了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://7xil0e.com1.z0.glb.clouddn.com/teacher/57908b8961854.png" alt=""></p>
<p>第一次认识小青（<a href="http://weibo.com/u/2314535081"]]>
    </summary>
    
      <category term="iOS" scheme="http://blog.devtang.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[谈谈 T 型人才]]></title>
    <link href="http://blog.devtang.com/2016/08/13/talk-about-full-stack/"/>
    <id>http://blog.devtang.com/2016/08/13/talk-about-full-stack/</id>
    <published>2016-08-13T03:10:25.000Z</published>
    <updated>2016-08-13T03:11:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u300C_u5168_u6808_u300D_u5DE5_u7A0B_u5E08"><a href="#u300C_u5168_u6808_u300D_u5DE5_u7A0B_u5E08" class="headerlink" title="「全栈」工程师"></a>「全栈」工程师</h2><p>前一段时间，「全栈」工程师的概念很火，不过大多数时候，「全栈」工程师指的是一个人同时写 Web 前端和后端，顶多加上一些运维工作。通常情况下，我很少见到一个人能够同时写 Web 前端 + 后端 +iOS 端 +Android 端。</p>
<p>在猿题库（我们现在改名叫猿辅导了）创业初期，我曾经试图同时写 iOS 和服务器端，但是我很快就放弃了。因为当时服务器端的代码量还是很大，同时有好几个人在编写。有些时候我需要加逻辑时，会涉及到他们的代码修改，这个时候我就会需要花费额外的精力来看懂他们原来的逻辑。</p>
<p>当时正值创业初期，我们的 Code Review 并不严格，代码的相关设计文档也不多，我只能通过阅读源码来跟上另外几个服务器端开发同学的逻辑。很快我就放弃了，因为在创业阶段，效率是第一位的，同时做 iOS 和 服务器端，使得我在服务器端不够专注，效率变得低下。</p>
<p>从那之后，我就意识到，「全栈」工程师可能最适合的场景就是 Web 前端 + 后端的偏前端的逻辑。因为那个场景下，前端工程师可以省掉沟通接口的时间，也可以自己统一前后端的模版，甚至他可以尝试统一语言，同时用 JavaScript 写前后端（在后端使用 nodejs）。</p>
<p>而在别的职位上，是很不适合全栈的，因为这样工作产出会下降。</p>
<h2 id="T__u578B_u4EBA_u624D"><a href="#T__u578B_u4EBA_u624D" class="headerlink" title="T 型人才"></a>T 型人才</h2><p>那我为什么又想聊 T 型人才呢？是因为我觉得 T 型人才和全栈不一样。在我看来，T 型人才有一门自己擅长和精通的语言，同时又有足够宽的视野，使得他在合作的时候，能够更多地站在对方的立场上考虑问题。</p>
<p>打个比方，做过服务器端开发的同学，再转而做客户端开发，就会更加注意 Restful 接口的设计合理性。相互之间协商接口时，知道什么样的方式服务器端好实现，什么样的方式不好实现，然后定出来的接口就会让对方非常舒适。</p>
<p>与此同时，T 型人才对于自己理解和学习新东西，也是有很大帮助的。我之前做过 Java 语言的服务器端开发和 JavaScript 语言的前端开发，之后才转做 iOS 开发。各种语言和开发环境接触多了就发现：其实很多概念都是相通的。我想我之所以当时学 iOS 开发上手那么快，也是由于在别的语言上有积累。</p>
<p>其实对于移动开发来说，iOS 和 Android 也有很多相同的概念，比如 iOS 的 UIViewController 和 Android 的 Activity。当然，它们也有很多不同的技术细节，比如对界面排版设计，iOS 因为设备屏幕单一，所以刚开始选择了简单的绝对定位，后面选择了 size class 的方式。而 Android 因为屏幕分裂严重，所以选择了更加流式的排版设计。</p>
<p>iOS 因为追求界面的流畅和性能，选择了引用计数这种相对麻烦的内存管理方式，而 Android 因为需要借力 Java 语言本身的生态和苹果竞争，所以采用了垃圾回收这种会带来潜在卡顿风险的内存管理方式。<br>每年的 Google IO 大会出现的新技术，并不比 WWDC 逊色。今年 iOS 10 的一些改进，也看到了不少 Android 的影子。</p>
<h2 id="u5982_u4F55_u6210_u4E3A_T__u578B_u4EBA_u624D"><a href="#u5982_u4F55_u6210_u4E3A_T__u578B_u4EBA_u624D" class="headerlink" title="如何成为 T 型人才"></a>如何成为 T 型人才</h2><p>那么如何成为 T 型人才呢？我们老大郭常圳想了一个办法：轮岗。轮岗的意思是，当你成为某一方面的专家后，跳出自己的舒适区，转而到一个新的技术领域从头学起。</p>
<p>在我们公司，很多早期员工都经历过轮岗。比如我曾经从服务器端转到前端和 iOS 端，也是轮岗这个激励带动的。yangyz 从服务器端转到 Android，xuhf 从 Android 转到服务器端，zhangyc 从 Web 前端转到后端。每一个轮岗工作，都是对我们极大的挑战，但是让我们都成长为 T 型人才。</p>
<p>但是，轮岗的意思绝不是做一个技术方向「三心二意」，每一次转换技术方向，都应该是对前一个技术方向至少做到熟练掌握的程度才行，而我自己觉得，不经过一到两年的实践，很难称作熟练掌握。所以，轮岗的行为应该是低频的，而且是面向那些最优秀的开发者的。</p>
<p>这一点有点像大学的换专业，在我们学校，大一的学生可以在一学期后申请换专业，但是前提是这个同学在愿专业成绩达到前 10%。</p>
<p>换专业和换技术方向一样，机会只会给做得最好的人，公司不会因为一个人在 iOS 开发上做得不好，就把他轮换到别的开发岗位。</p>
<h2 id="u521B_u4E1A_u521D_u671F"><a href="#u521B_u4E1A_u521D_u671F" class="headerlink" title="创业初期"></a>创业初期</h2><p>在创业初期，很多时候技术创始团队由于缺人，每个人都是多面手。上次一个朋友说，他自己完全了服务器和网站的开发，然后又自己开发了 iOS 和 Android 端，实现了真正的「全栈」。</p>
<p>对此，我完全不否认有这样的人存在，而且我认为创业初期这么做也是完全合理的。因为创业初期重要的是做出东西，而招不到人的情况下，自己动手干是最简单直接的方式。</p>
<p>我想我更想表达的是一个词：效率。举个例子，假如这个创业公司做大了，变成 20 人的技术团队时，你会让每个人都同时做服务器，iOS，Android 开发呢，还是每个人只做某一方面？我想从效率上讲，每个人只做某一个具体的平台，效率是最大化的。这其实就是我想表达的，「全栈」工程师在理想情况下，并不是高效运作的公司期望的，只有某些特别情况下，「全栈」才有它存在的理由。</p>
<p>但是反过来，T 型人才是每个公司都期望拥有的，因为这样的人才视野更广，学习能力更强，沟通时会从对方角度考虑技术方案，甚至在某些技术方向没落之后，也会迅速地成功转型，这才是互联网公司理想的人才。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u300C_u5168_u6808_u300D_u5DE5_u7A0B_u5E08"><a href="#u300C_u5168_u6808_u300D_u5DE5_u7A0B_u5E08" class="headerlink" title="「全栈」工程师"><]]>
    </summary>
    
      <category term="startup" scheme="http://blog.devtang.com/tags/startup/"/>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何用 Git 将代码恢复到一个历史的版本]]></title>
    <link href="http://blog.devtang.com/2016/08/06/revert-to-target-commit-with-git/"/>
    <id>http://blog.devtang.com/2016/08/06/revert-to-target-commit-with-git/</id>
    <published>2016-08-06T09:39:43.000Z</published>
    <updated>2016-08-09T07:37:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u9700_u6C42"><a href="#u9700_u6C42" class="headerlink" title="需求"></a>需求</h2><p>有些时候，在一些特殊情况下，我们需要将代码恢复到一个历史的提交版本上。而这个历史提交版本，离最新的提交已经比较久远了。</p>
<p>比如，我希望将如下的仓库的提交，恢复到上上上上次提交。当然，我可以一次一次的 revert，但是有没有更快更简单的办法呢？</p>
<img src="/images/git-revert-1.jpg">
<h2 id="u66B4_u529B_u7684_u65B9_u5F0F"><a href="#u66B4_u529B_u7684_u65B9_u5F0F" class="headerlink" title="暴力的方式"></a>暴力的方式</h2><p>如果你的仓库是自己在用（不影响别人），那么你可以使用 <code>git reset --hard &lt;target_commit_id&gt;</code> 来恢复到指定的提交，再用 <code>git push -f</code> 来强制更新远程的分支指针。为了保证万一需要找回历史提交，我们可以先打一个 tag 来备份。</p>
<p>对于刚刚的例子，需要执行的命令就是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// &#22791;&#20221;&#24403;&#21069;&#30340;&#20998;&#25903;&#21040; backup_commit&#10;git tag backup_commit&#10;git push origin backup_commit&#10;// &#37325;&#32622; source &#20998;&#25903;&#10;git reset --hard 23801b2&#10;// &#24378;&#21046; push &#26356;&#26032;&#36828;&#31243;&#20998;&#25903;&#10;git push origin source -f</span><br></pre></td></tr></table></figure>
<h2 id="u6E29_u548C_u7684_u65B9_u5F0F"><a href="#u6E29_u548C_u7684_u65B9_u5F0F" class="headerlink" title="温和的方式"></a>温和的方式</h2><p>如果你的仓库是多人在协作，那么你这么操作会使用别人本地的代码库混乱，所以只能建一个新的提交，这个新的提交中把想取消的提交都 revert 掉，那么具体应该如何做呢？方法如下：</p>
<p>首先，和刚刚一样，用 <code>git reset --hard 23801b2</code> 将代码切换到目标提交的 id。接下来，用 <code>git reset --soft origin/source</code> 命令，将当前代码切换回最新的提交。</p>
<p>执行完上面两步后，你的仓库还是最新的提交，但是工作区变成了历史的提交内容，这个时候用 <code>git add</code> 和 <code>git commit</code> 即可。最终完成的效果如下：</p>
<img src="/images/git-revert-2.jpg">
<p>不过经过念茜的提醒，该方法需要保证 reset 的时候没有别人做新的提交，如果有的话，会一并把别人的提交也撤销了。所以还是挺危险的，慎用。</p>
<p>虽然用到的时候很少，但是理解它的原理有助于大家理解 Git 的工作区，暂存区和版本库的各种指针操作的意义，希望对大家有用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u9700_u6C42"><a href="#u9700_u6C42" class="headerlink" title="需求"></a>需求</h2><p>有些时候，在一些特殊情况下，我们需要将代码恢复到一个历史的提交版本上。而这个历史提交版本，离最新的提交已]]>
    </summary>
    
      <category term="Git" scheme="http://blog.devtang.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我为什么不喜欢 Core Data]]></title>
    <link href="http://blog.devtang.com/2016/08/04/i-do-not-like-core-data/"/>
    <id>http://blog.devtang.com/2016/08/04/i-do-not-like-core-data/</id>
    <published>2016-08-04T14:47:06.000Z</published>
    <updated>2016-08-07T09:19:41.000Z</updated>
    <content type="html"><![CDATA[<img src="/images/core-data-head.jpg">
<p>我一直不喜欢 Core Data，以前不太敢明目张胆地这么表达，现在收集到越来越多相关的信息，所以给大家分享一下，我为什么不喜欢 Core Data。</p>
<h2 id="Core_Data__u592A_u590D_u6742"><a href="#Core_Data__u592A_u590D_u6742" class="headerlink" title="Core Data 太复杂"></a>Core Data 太复杂</h2><p>在今年刚刚结束的 <a href="http://gmtc.geekbang.org/" target="_blank" rel="external">GMTC 大会</a>上，来自澳洲的李剑做了题为《iOS 遗留系统上的架构重构》的演讲，其中就提到 Core Data 给他们 500 万用户带来了 300 万次崩溃。我想任何产品都是不能接受这样的崩溃率的。</p>
<p>这 300 万次崩溃是 Core Data 的问题吗？可能也不是。在现场我没有看到具体的代码细节，我更觉得这可能是 Core Data 在使用中的各种坑，需要大家注意避免的。但是 Core Data 的坑是如此之多，使得像李剑这样的资深 iOS 开发者也不得不考虑将其直接替换掉。一个好的技术框架应该是不容易出现使用错误的，所以从这个角度讲，Core Data 本身的设计就是不好的。</p>
<h2 id="Core_Data__u5B66_u4E60_u6210_u672C_u9AD8"><a href="#Core_Data__u5B66_u4E60_u6210_u672C_u9AD8" class="headerlink" title="Core Data 学习成本高"></a>Core Data 学习成本高</h2><p>很多人觉得 Core Data 简单易学，我听了简直觉得自己的智商得到了 1 万点的伤害。反正我学习 Core Data 那阵子，Core Data 的各种概念着实让我郁闷了好久。在 OhMyStar 的作者 yu 的博客<a href="http://www.iiiyu.com/2016/01/19/CoreData-VS-Realm/" target="_blank" rel="external">文章</a>上，yu 这么写道：</p>
<blockquote>
<p>CoreData 是一个博大精深的技术，不要妄想几天之内可以用的很溜。<br>CoreData 是一个博大精深的技术，不要妄想几天之内可以用的很溜。<br>CoreData 是一个博大精深的技术，不要妄想几天之内可以用的很溜。</p>
<p>如果没有足够的时间和精力去接入 Core Data。 那选型的时候应当慎重考虑。</p>
</blockquote>
<p>我想那些觉得 Core Data 很简单的人，可能更多时候是自己学了一点皮毛，就以为懂了全部吧。反正我是学不会 Core Data。</p>
<h2 id="Core_Data__u7684_u6536_u76CA_u5E76_u4E0D_u5927"><a href="#Core_Data__u7684_u6536_u76CA_u5E76_u4E0D_u5927" class="headerlink" title="Core Data 的收益并不大"></a>Core Data 的收益并不大</h2><p>如果一门技术方案学习成本高，那么我们有动力继续学习的它的唯一理由就是：它的收益也非常大。但是，Core Data 在各种性能测试中，表现出<br>来的收益是相当差的。在这一点上，Realm 是最喜欢拿来说事的，拿查阅来说，Core Data 的性能是 FMDB 的六分之一不到，Realm 的十分之一不到。</p>
<img src="/images/coredata-vs-realm.jpg">
<p>Core Data 带来的另外的特性：例如可视化的编辑界面，关联关系的创建，数据库升级的支持，我个人觉得都不是非常大的收益。相对它带来的麻烦，这些收益微不足道。</p>
<h2 id="Core_Data__u7684_u8FD9_u5C42_u62BD_u8C61_u6CA1_u5FC5_u8981"><a href="#Core_Data__u7684_u8FD9_u5C42_u62BD_u8C61_u6CA1_u5FC5_u8981" class="headerlink" title="Core Data 的这层抽象没必要"></a>Core Data 的这层抽象没必要</h2><p>其实 Core Data 是构建在 SQLite 之上，对数据存储层进行了进一步的抽象。而我个人认为，对于一个计算机专业的人员来说，掌握 SQL 就像掌握 BASIC 一样容易，关系型数据库实在太容易理解了，完全没有必要在这上面再做一层抽像，带来额外的理解成本。</p>
<p>所以我更喜欢用 FMDB，它只是将 SQLite 的一些方法进行了 Objective-C 语言更加友好的调用封装，除此之外，你就完全是在操作一个 SQLite 数据库。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>使用复杂，学习复杂，坑多，收益小成本大，基本没有意义的抽象，我们还有什么理由继续学习和使用 Core Data ？</p>
<p>哦，对了，我也不喜欢  Realm，有机会下次再说它。</p>
<p>对于我来说，FMDB 以及构建在 FMDB 上的简单的 Key-Value 存储就足够了。我之前在 GitHub 开源过一个简单的基于 FMDB 的 KeyValue 存储 <a href="https://github.com/yuantiku/YTKKeyValueStore" target="_blank" rel="external">YTKKeyValueStore</a>，感兴趣的可以翻翻。</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/core-data-head.jpg">
<p>我一直不喜欢 Core Data，以前不太敢明目张胆地这么表达，现在收集到越来越多相关的信息，所以给大家分享一下，我为什么不喜欢 Core Data。</p>
<h2 id="Core_Data_]]>
    </summary>
    
      <category term="iOS" scheme="http://blog.devtang.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[理解 iOS 的内存管理]]></title>
    <link href="http://blog.devtang.com/2016/07/30/ios-memory-management/"/>
    <id>http://blog.devtang.com/2016/07/30/ios-memory-management/</id>
    <published>2016-07-30T00:43:42.000Z</published>
    <updated>2016-07-30T01:02:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u8FDC_u53E4_u65F6_u4EE3_u7684_u6545_u4E8B"><a href="#u8FDC_u53E4_u65F6_u4EE3_u7684_u6545_u4E8B" class="headerlink" title="远古时代的故事"></a>远古时代的故事</h2><p>那些经历过手工管理内存（MRC）时代的人们，一定对 iOS 开发中的内存管理记忆犹新。那个时候大约是 2010 年，国内 iOS 开发刚刚兴起，tinyfool 大叔的大名已经如雷贯耳，而我还是一个默默无闻的刚毕业的小子。那个时候的 iOS 开发过程是这样的：</p>
<blockquote>
<p>我们先写好一段 iOS 的代码，然后屏住呼吸，开始运行它，不出所料，它崩溃了。在 MRC 时代，即使是最牛逼的 iOS 开发者，也不能保证一次性就写出完美的内存管理代码。于是，我们开始一步一步调试，试着打印出每个怀疑对象的引用计数（Retain Count），然后，我们小心翼翼地插入合理的 <code>retain</code> 和 <code>release</code> 代码。经过一次又一次的应用崩溃和调试，终于有一次，应用能够正常运行了！于是我们长舒一口气，露出久违的微笑。</p>
</blockquote>
<p>是的，这就是那个年代的 iOS 开发者，通常情况下，我们在开发完一个功能后，需要再花好几个小时，才能把引用计数管理好。</p>
<p>苹果在 2011 年的时候，在 WWDC 大会上提出了自动的引用计数（ARC）。ARC 背后的原理是依赖编译器的静态分析能力，通过在编译时找出合理的插入引用计数管理代码，从而彻底解放程序员。</p>
<p>在 ARC 刚刚出来的时候，业界对此黑科技充满了怀疑和观望，加上现有的 MRC 代码要做迁移本来也需要额外的成本，所以 ARC 并没有被很快接受。直到 2013 年左右，苹果认为 ARC 技术足够成熟，直接将 macOS（当时叫 OS X）上的垃圾回收机制废弃，从而使得 ARC 迅速被接受。</p>
<p>2014 年的 WWDC 大会上，苹果推出了 Swift 语言，而该语言仍然使用 ARC 技术，作为其<a href="https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html" target="_blank" rel="external">内存管理方式</a>。</p>
<p>为什么我要提这段历史呢？就是因为现在的 iOS 开发者实在太舒服了，大部分时候，他们根本都不用关心程序的内存管理行为。但是，<strong>虽然 ARC 帮我们解决了引用计数的大部分问题，一些年轻的 iOS 开发者仍然会做不好内存管理工作</strong>。他们甚至不能理解常见的循环引用问题，而这些问题会导致内存泄漏，最终使得应用运行缓慢或者被系统终止进程。</p>
<p>所以，我们每一个 iOS 开发者，需要理解引用计数这种内存管理方式，只有这样，才能处理好内存管理相关的问题。</p>
<h2 id="u4EC0_u4E48_u662F_u5F15_u7528_u8BA1_u6570"><a href="#u4EC0_u4E48_u662F_u5F15_u7528_u8BA1_u6570" class="headerlink" title="什么是引用计数"></a>什么是引用计数</h2><p>引用计数（Reference Count）是一个简单而有效的管理对象生命周期的方式。当我们创建一个新对象的时候，它的引用计数为 1，当有一个新的指针指向这个对象时，我们将其引用计数加 1，当某个指针不再指向这个对象是，我们将其引用计数减 1，当对象的引用计数变为 0 时，说明这个对象不再被任何指针指向了，这个时候我们就可以将对象销毁，回收内存。由于引用计数简单有效，除了 Objective-C 和 Swift 语言外，微软的 COM（Component Object Model ）、C++11（C++11 提供了基于引用计数的智能指针 share_prt）等语言也提供了基于引用计数的内存管理方式。</p>
<img src="/images/memory-ref-count.png">
<p>为了更形象一些，我们再来看一段 Objective-C 的代码。新建一个工程，因为现在默认的工程都开启了自动的引用计数 ARC（Automatic Reference Count)，我们先修改工程设置，给 AppDelegate.m 加上 <code>-fno-objc-arc</code> 的编译参数（如下图所示），这个参数可以启用手工管理引用计数的模式。</p>
<img src="/images/memory-fno-objc-arc.png">
<p>然后，我们在中输入如下代码，可以通过 Log 看到相应的引用计数的变化。</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application </span><br><span class="line">       didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSObject</span> *object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Reference Count = %u"</span>, [object retainCount]);</span><br><span class="line">    <span class="built_in">NSObject</span> *another = [object retain];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Reference Count = %u"</span>, [object retainCount]);</span><br><span class="line">    [another release];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Reference Count = %u"</span>, [object retainCount]);</span><br><span class="line">    [object release];</span><br><span class="line">    <span class="comment">// 到这里时，object 的内存被释放了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reference Count = 1&#10;Reference Count = 2&#10;Reference Count = 1</span><br></pre></td></tr></table></figure>
<p>对 Linux 文件系统比较了解的同学可能发现，引用计数的这种管理方式类似于文件系统里面的硬链接。在 Linux 文件系统中，我们用 <code>ln</code> 命令可以创建一个硬链接（相当于我们这里的 retain)，当删除一个文件时（相当于我们这里的 release)，系统调用会检查文件的 link count 值，如果大于 1，则不会回收文件所占用的磁盘区域。直到最后一次删除前，系统发现 link count 值为 1，则系统才会执行直正的删除操作，把文件所占用的磁盘区域标记成未用。</p>
<h2 id="u6211_u4EEC_u4E3A_u4EC0_u4E48_u9700_u8981_u5F15_u7528_u8BA1_u6570"><a href="#u6211_u4EEC_u4E3A_u4EC0_u4E48_u9700_u8981_u5F15_u7528_u8BA1_u6570" class="headerlink" title="我们为什么需要引用计数"></a>我们为什么需要引用计数</h2><p>从上面那个简单的例子中，我们还看不出来引用计数真正的用处。因为该对象的生命期只是在一个函数内，所以在真实的应用场景下，我们在函数内使用一个临时的对象，通常是不需要修改它的引用计数的，只需要在函数返回前将该对象销毁即可。</p>
<p>引用计数真正派上用场的场景是在面向对象的程序设计架构中，用于对象之间传递和共享数据。我们举一个具体的例子：</p>
<p>假如对象 A 生成了一个对象 M，需要调用对象 B 的某一个方法，将对象 M 作为参数传递过去。在没有引用计数的情况下，一般内存管理的原则是 “谁申请谁释放”，那么对象 A 就需要在对象 B 不再需要对象 M 的时候，将对象 M 销毁。但对象 B 可能只是临时用一下对象 M，也可能觉得对象 M 很重要，将它设置成自己的一个成员变量，那这种情况下，什么时候销毁对象 M 就成了一个难题。</p>
<img src="/images/memory-talk-1.png">
<p>对于这种情况，有一个暴力的做法，就是对象 A 在调用完对象 B 之后，马上就销毁参数对象 M，然后对象 B 需要将参数另外复制一份，生成另一个对象 M2，然后自己管理对象 M2 的生命期。但是这种做法有一个很大的问题，就是它带来了更多的内存申请、复制、释放的工作。本来一个可以复用的对象，因为不方便管理它的生命期，就简单的把它销毁，又重新构造一份一样的，实在太影响性能。如下图所示：</p>
<img src="/images/memory-talk-2.png">
<p>我们另外还有一种办法，就是对象 A 在构造完对象 M 之后，始终不销毁对象 M，由对象 B 来完成对象 M 的销毁工作。如果对象 B 需要长时间使用对象 M，它就不销毁它，如果只是临时用一下，则可以用完后马上销毁。这种做法看似很好地解决了对象复制的问题，但是它强烈依赖于 AB 两个对象的配合，代码维护者需要明确地记住这种编程约定。而且，由于对象 M 的申请是在对象 A 中，释放在对象 B 中，使得它的内存管理代码分散在不同对象中，管理起来也非常费劲。如果这个时候情况再复杂一些，例如对象 B 需要再向对象 C 传递对象 M，那么这个对象在对象 C 中又不能让对象 C 管理。所以这种方式带来的复杂性更大，更不可取。</p>
<img src="/images/memory-talk-3.png">
<p>所以引用计数很好的解决了这个问题，在参数 M 的传递过程中，哪些对象需要长时间使用这个对象，就把它的引用计数加 1，使用完了之后再把引用计数减 1。所有对象都遵守这个规则的话，对象的生命期管理就可以完全交给引用计数了。我们也可以很方便地享受到共享对象带来的好处。</p>
<h2 id="u4E0D_u8981_u5411_u5DF2_u7ECF_u91CA_u653E_u7684_u5BF9_u8C61_u53D1_u9001_u6D88_u606F"><a href="#u4E0D_u8981_u5411_u5DF2_u7ECF_u91CA_u653E_u7684_u5BF9_u8C61_u53D1_u9001_u6D88_u606F" class="headerlink" title="不要向已经释放的对象发送消息"></a>不要向已经释放的对象发送消息</h2><p>有些同学想测试当对象释放时，其 <code>retainCount</code> 是否变成了 0，他们的试验代码如下：</p>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSObject</span> *object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Reference Count = %u"</span>, [object retainCount]);</span><br><span class="line">    [object release];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Reference Count = %u"</span>, [object retainCount]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是，如果你真的这么实验，你得到的输出结果可能是以下这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Reference Count = 1&#10;Reference Count = 1</span><br></pre></td></tr></table></figure>
<p>我们注意到，最后一次输出，引用计数并没有变成 0。这是为什么呢？因为该对象的内存已经被回收，而我们向一个已经被回收的对象发了一个 retainCount 消息，所以它的输出结果应该是不确定的，如果该对象所占的内存被复用了，那么就有可能造成程序异常崩溃。</p>
<p>那为什么在这个对象被回收之后，这个不确定的值是 1 而不是 0 呢？这是因为当最后一次执行 release 时，系统知道马上就要回收内存了，就没有必要再将 retainCount 减 1 了，因为不管减不减 1，该对象都肯定会被回收，而对象被回收后，它的所有的内存区域，包括 retainCount 值也变得没有意义。不将这个值从 1 变成 0，可以减少一次内存的写操作，加速对象的回收。</p>
<p>拿我们之前提到的 Linux 文件系统举列，Linux 文件系统下删除一个文件，也不是真正的将文件的磁盘区域进行抹除操作，而只是删除该文件的索引节点号。这也和引用计数的内存回收方式类似，即回收时只做标记，并不抹除相关的数据。</p>
<h2 id="ARC__u4E0B_u7684_u5185_u5B58_u7BA1_u7406_u95EE_u9898"><a href="#ARC__u4E0B_u7684_u5185_u5B58_u7BA1_u7406_u95EE_u9898" class="headerlink" title="ARC 下的内存管理问题"></a>ARC 下的内存管理问题</h2><p>ARC 能够解决 iOS 开发中 90% 的内存管理问题，但是另外还有 10% 内存管理，是需要开发者自己处理的，这主要就是与底层 Core Foundation 对象交互的那部分，底层的 Core Foundation 对象由于不在 ARC 的管理下，所以需要自己维护这些对象的引用计数。</p>
<p>对于 ARC 盲目依赖的 iOS 新人们，由于不知道引用计数，他们的问题主要体现在：</p>
<ol>
<li>过度使用 block 之后，无法解决循环引用问题。</li>
<li>遇到底层 Core Foundation 对象，需要自己手工管理它们的引用计数时，显得一筹莫展。</li>
</ol>
<h3 id="u5FAA_u73AF_u5F15_u7528_uFF08Reference_Cycle_uFF09_u95EE_u9898"><a href="#u5FAA_u73AF_u5F15_u7528_uFF08Reference_Cycle_uFF09_u95EE_u9898" class="headerlink" title="循环引用（Reference Cycle）问题"></a>循环引用（Reference Cycle）问题</h3><p>引用计数这种管理内存的方式虽然很简单，但是有一个比较大的瑕疵，即它不能很好的解决循环引用问题。如下图所示：对象 A 和对象 B，相互引用了对方作为自己的成员变量，只有当自己销毁时，才会将成员变量的引用计数减 1。因为对象 A 的销毁依赖于对象 B 销毁，而对象 B 的销毁与依赖于对象 A 的销毁，这样就造成了我们称之为循环引用（Reference Cycle）的问题，这两个对象即使在外界已经没有任何指针能够访问到它们了，它们也无法被释放。</p>
<img src="/images/memory-cycle-1.png">
<p>不止两对象存在循环引用问题，多个对象依次持有对方，形式一个环状，也可以造成循环引用问题，而且在真实编程环境中，环越大就越难被发现。下图是 4 个对象形成的循环引用问题。</p>
<img src="/images/memory-cycle-2.png">
<h3 id="u4E3B_u52A8_u65AD_u5F00_u5FAA_u73AF_u5F15_u7528"><a href="#u4E3B_u52A8_u65AD_u5F00_u5FAA_u73AF_u5F15_u7528" class="headerlink" title="主动断开循环引用"></a>主动断开循环引用</h3><p>解决循环引用问题主要有两个办法，第一个办法是我明确知道这里会存在循环引用，在合理的位置主动断开环中的一个引用，使得对象得以回收。如下图所示：</p>
<img src="/images/memory-cycle-3.png">
<p>主动断开循环引用这种方式常见于各种与 block 相关的代码逻辑中。例如在我开源的 <a href="https://github.com/yuantiku/YTKNetwork" target="_blank" rel="external">YTKNetwork</a> 网络库中，网络请求的回调 block 是被持有的，但是如果这个 block 中又存在对于 View Controller 的引用，就很容易产生从循环引用，因为：</p>
<ul>
<li>Controller 持有了网络请求对象</li>
<li>网络请求对象持有了回调的 block</li>
<li>回调的 block 里面使用了 <code>self</code>，所以持有了 Controller</li>
</ul>
<p>解决办法就是，在网络请求结束后，网络请求对象执行完 block 之后，主动释放对于 block 的持有，以便打破循环引用。相关的代码见：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// https://github.com/yuantiku/YTKNetwork/blob/master/YTKNetwork/YTKBaseRequest.m&#10;// &#31532; 147 &#34892;&#65306;&#10;- (void)clearCompletionBlock &#123;&#10;    // &#20027;&#21160;&#37322;&#25918;&#25481;&#23545;&#20110; block &#30340;&#24341;&#29992;&#10;    self.successCompletionBlock = nil;&#10;    self.failureCompletionBlock = nil;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>不过，主动断开循环引用这种操作依赖于程序员自己手工显式地控制，相当于回到了以前 “谁申请谁释放” 的内存管理年代，它依赖于程序员自己有能力发现循环引用并且知道在什么时机断开循环引用回收内存（这通常与具体的业务逻辑相关），所以这种解决方法并不常用，更常见的办法是使用弱引用 (weak reference) 的办法。</p>
<h3 id="u4F7F_u7528_u5F31_u5F15_u7528"><a href="#u4F7F_u7528_u5F31_u5F15_u7528" class="headerlink" title="使用弱引用"></a>使用弱引用</h3><p>弱引用虽然持有对象，但是并不增加引用计数，这样就避免了循环引用的产生。在 iOS 开发中，弱引用通常在 delegate 模式中使用。举个例子来说，两个 ViewController A 和 B，ViewController A 需要弹出 ViewController B，让用户输入一些内容，当用户输入完成后，ViewController B 需要将内容返回给 ViewController A。这个时候，View Controller 的 delegate 成员变量通常是一个弱引用，以避免两个 ViewController 相互引用对方造成循环引用问题，如下所示：</p>
<img src="/images/memory-cycle-4.png">
<h3 id="u5F31_u5F15_u7528_u7684_u5B9E_u73B0_u539F_u7406"><a href="#u5F31_u5F15_u7528_u7684_u5B9E_u73B0_u539F_u7406" class="headerlink" title="弱引用的实现原理"></a>弱引用的实现原理</h3><p>弱引用的实现原理是这样，系统对于每一个有弱引用的对象，都维护一个表来记录它所有的弱引用的指针地址。这样，当一个对象的引用计数为 0 时，系统就通过这张表，找到所有的弱引用指针，继而把它们都置成 nil。</p>
<p>从这个原理中，我们可以看出，弱引用的使用是有额外的开销的。虽然这个开销很小，但是如果一个地方我们肯定它不需要弱引用的特性，就不应该盲目使用弱引用。举个例子，有人喜欢在手写界面的时候，将所有界面元素都设置成 weak 的，这某种程度上与 Xcode 通过 Storyboard 拖拽生成的新变量是一致的。但是我个人认为这样做并不太合适。因为：</p>
<ol>
<li>我们在创建这个对象时，需要注意临时使用一个强引用持有它，否则因为 weak 变量并不持有对象，就会造成一个对象刚被创建就销毁掉。</li>
<li>大部分 ViewController 的视图对象的生命周期与 ViewController 本身是一致的，没有必要额外做这个事情。</li>
<li>早先苹果这么设计，是有历史原因的。在早年，当时系统收到 Memory Warning 的时候，ViewController 的 View 会被 unLoad 掉。这个时候，使用 weak 的视图变量是有用的，可以保持这些内存被回收。但是这个设计已经被废弃了，替代方案是将相关视图的 CALayer 对应的 CABackingStore 类型的内存区会被标记成 volatile 类型，详见<a href="/2013/05/18/goodbye-viewdidunload/">《再见，viewDidUnload方法》</a>。</li>
</ol>
<h3 id="u4F7F_u7528_Xcode__u68C0_u6D4B_u5FAA_u73AF_u5F15_u7528"><a href="#u4F7F_u7528_Xcode__u68C0_u6D4B_u5FAA_u73AF_u5F15_u7528" class="headerlink" title="使用 Xcode 检测循环引用"></a>使用 Xcode 检测循环引用</h3><p>Xcode 的 Instruments 工具集可以很方便的检测循环引用。为了测试效果，我们在一个测试用的 ViewController 中填入以下代码，该代码中的 <code>firstArray</code> 和 <code>secondArray</code> 相互引用了对方，构成了循环引用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- (void)viewDidLoad&#10;&#123;&#10;    [super viewDidLoad];&#10;    NSMutableArray *firstArray = [NSMutableArray array];&#10;    NSMutableArray *secondArray = [NSMutableArray array];&#10;    [firstArray addObject:secondArray];&#10;    [secondArray addObject:firstArray];&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>在 Xcode 的菜单栏选择：Product -&gt; Profile，然后选择 “Leaks”，再点击右下角的”Profile” 按钮开始检测。如下图</p>
<img src="/images/memory-instruments-1.jpg">
<p>这个时候 iOS 模拟器会运行起来，我们在模拟器里进行一些界面的切换操作。稍等几秒钟，就可以看到 Instruments 检测到了我们的这次循环引用。Instruments 中会用一条红色的条来表示一次内存泄漏的产生。如下图所示：</p>
<img src="/images/memory-instruments-2.jpg">
<p>我们可以切换到 Leaks 这栏，点击”Cycles &amp; Roots”，就可以看到以图形方式显示出来的循环引用。这样我们就可以非常方便地找到循环引用的对象了。</p>
<img src="/images/memory-instruments-3.png">
<h3 id="Core_Foundation__u5BF9_u8C61_u7684_u5185_u5B58_u7BA1_u7406"><a href="#Core_Foundation__u5BF9_u8C61_u7684_u5185_u5B58_u7BA1_u7406" class="headerlink" title="Core Foundation 对象的内存管理"></a>Core Foundation 对象的内存管理</h3><p>下面我们就来简单介绍一下对底层 Core Foundation 对象的内存管理。底层的 Core Foundation 对象，在创建时大多以 XxxCreateWithXxx 这样的方式创建，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// &#21019;&#24314;&#19968;&#20010; CFStringRef &#23545;&#35937;&#10;CFStringRef str= CFStringCreateWithCString(kCFAllocatorDefault, &#8220;hello world&#34;, kCFStringEncodingUTF8);&#10;&#10;// &#21019;&#24314;&#19968;&#20010; CTFontRef &#23545;&#35937;&#10;CTFontRef fontRef = CTFontCreateWithName((CFStringRef)@&#34;ArialMT&#34;, fontSize, NULL);</span><br></pre></td></tr></table></figure>
<p>对于这些对象的引用计数的修改，要相应的使用 <code>CFRetain</code> 和 <code>CFRelease</code> 方法。如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#10;// &#21019;&#24314;&#19968;&#20010; CTFontRef &#23545;&#35937;&#10;CTFontRef fontRef = CTFontCreateWithName((CFStringRef)@&#34;ArialMT&#34;, fontSize, NULL);&#10;&#10;// &#24341;&#29992;&#35745;&#25968;&#21152; 1&#10;CFRetain(fontRef);&#10;// &#24341;&#29992;&#35745;&#25968;&#20943; 1&#10;CFRelease(fontRef);</span><br></pre></td></tr></table></figure>
<p>对于 <code>CFRetain</code> 和 <code>CFRelease</code> 两个方法，读者可以直观地认为，这与 Objective-C 对象的 <code>retain</code> 和 <code>release</code> 方法等价。</p>
<p>所以对于底层 Core Foundation 对象，我们只需要延续以前手工管理引用计数的办法即可。</p>
<p>除此之外，还有另外一个问题需要解决。在 ARC 下，我们有时需要将一个 Core Foundation 对象转换成一个 Objective-C 对象，这个时候我们需要告诉编译器，转换过程中的引用计数需要做如何的调整。这就引入了<code>bridge</code>相关的关键字，以下是这些关键字的说明：</p>
<ul>
<li><code>__bridge</code>: 只做类型转换，不修改相关对象的引用计数，原来的 Core Foundation 对象在不用时，需要调用 CFRelease 方法。</li>
<li><code>__bridge_retained</code>：类型转换后，将相关对象的引用计数加 1，原来的 Core Foundation 对象在不用时，需要调用 CFRelease 方法。</li>
<li><code>__bridge_transfer</code>：类型转换后，将该对象的引用计数交给 ARC 管理，Core Foundation 对象在不用时，不再需要调用 CFRelease 方法。</li>
</ul>
<p>我们根据具体的业务逻辑，合理使用上面的 3 种转换关键字，就可以解决 Core Foundation 对象与 Objective-C 对象相对转换的问题了。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>在 ARC 的帮助下，iOS 开发者的内存管理工作已经被大大减轻，但是我们仍然需要理解引用计数这种内存管理方式的优点和常见问题，特别要注意解决循环引用问题。对于循环引用问题有两种主要的解决办法，一是主动断开循环引用，二是使用弱引用的方式避免循环引用。对于 Core Foundation 对象，由于不在 ARC 管理之下，我们仍然需要延续以前手工管理引用计数的办法。</p>
<p>在调试内存问题时，Instruments 工具可以很好地对我们进行辅助，善用 Instruments 可以节省我们大量的调试时间。</p>
<p>愿每一个 iOS 开发者都可以掌握 iOS 的内存管理技能。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u8FDC_u53E4_u65F6_u4EE3_u7684_u6545_u4E8B"><a href="#u8FDC_u53E4_u65F6_u4EE3_u7684_u6545_u4E8B" class="headerlink" title="远古时代的故事"><]]>
    </summary>
    
      <category term="iOS" scheme="http://blog.devtang.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[六个维度的理论和故事 - 读《管理 3.0》]]></title>
    <link href="http://blog.devtang.com/2016/07/24/management-30-summary/"/>
    <id>http://blog.devtang.com/2016/07/24/management-30-summary/</id>
    <published>2016-07-24T13:00:46.000Z</published>
    <updated>2016-07-24T13:00:46.000Z</updated>
    <content type="html"><![CDATA[<img src="/images/management30-0.jpg">
<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>最近读完了段念推荐的<a href="http://item.jd.com/10938548.html" target="_blank" rel="external">《管理 3.0：培养和提升敏捷领导力》</a>，本书是一本结构规整的书，全书将管理理论用六个维度来阐述，然后每个维度下，先讲理论，再讲实践中的故事。</p>
<p>在作者 Jurgen Appelo 的理解下，管理的六个维度是：</p>
<ul>
<li>激励员工：保持员工的活力、创造力和积极性。</li>
<li>授权团队：如何进行自组织。</li>
<li>调合约束：如何保护人力资源以及如何共享资源。</li>
<li>培养能力：如何提高员工技能和提高竞争力。</li>
<li>壮大组织：如何实现组织的成长。</li>
<li>全面改进：如何进行改进。</li>
</ul>
<p>本书对我来说，收获最大的是「壮大组织」（第 12，13 章）部分所介绍的实践。很多想法我自己本身有一些体会，看到书中的介绍就更加清楚了，以下是这部分的一些想法。</p>
<h2 id="u4E13_u4E1A_u4E3B_u4E49"><a href="#u4E13_u4E1A_u4E3B_u4E49" class="headerlink" title="专业主义"></a>专业主义</h2><p>书中提到了专业人才，并且认为专业人才应该是优先被考虑的人才结构。这点我很认同，但是它和部分业界的观点不同。</p>
<p>比如，业界一直在追捧「全栈」工程师，但是其实大部分所谓的「全栈」工程师，是指同时写 Web 前端和后台逻辑。这里的后台逻辑通常也偏业务逻辑一些，不涉及太多的高并发问题。所以，「全栈」工程师更多时候是一种特定业务场景下的需求，在这些特定业务场景下，「全栈」的工程师可以省去沟通前后端接口约定的沟通工作，在出现问题后，也更加便于排查。在 Nodejs 流行后，由于前后端可以统一编程语言，进而可以统一渲染模版，前端工程师更加有动力参与到部分后端的工作中。</p>
<p>但是，「全栈」工程师也仅限于此，涉及到更专业的领域时，组织还是更倾向于使用专业人才。不信的话，你可以问问，很少有人同时做 iOS 和 Android 端的开发，也很少有人同时做客户端和服务器端的「全栈」开发。</p>
<p>但是，在一方面专精，同时对于其它方面又有广泛了解的人员会带来更多的沟通和协作上的效率提升，所以我们都强调培养 T 型人才。T 型人才指在某一方面专长，但是又有着不错的知识面的人。比如 iOS 开发者，如果同时能懂一些产品、交互、服务器端的知识，那么在合作上就会舒服得多。</p>
<h2 id="u6241_u5E73_u5C42_u7EA7_u4E0E_u975E_u6B63_u5F0F_u9886_u5BFC_u529B"><a href="#u6241_u5E73_u5C42_u7EA7_u4E0E_u975E_u6B63_u5F0F_u9886_u5BFC_u529B" class="headerlink" title="扁平层级与非正式领导力"></a>扁平层级与非正式领导力</h2><p>过多的管理层级带来效率低下的沟通和决策过程，所以现在的互联网公司都提倡扁平化的层级。但是在扁平化的层级下同样需要合作和决策，这个时候非正式的领导力就变得更加重要了。</p>
<p>非正式领导力在我们公司并没有被明确提出来，但是它确实反复存在。非正式的领导力在跨部门合作的时候变得异常重要，而这里面也涉及大量的沟通技巧。</p>
<h2 id="u804C_u80FD_u578B_u56E2_u961F_vs__u8DE8_u804C_u80FD_u578B_u56E2_u961F"><a href="#u804C_u80FD_u578B_u56E2_u961F_vs__u8DE8_u804C_u80FD_u578B_u56E2_u961F" class="headerlink" title="职能型团队 vs 跨职能型团队"></a>职能型团队 vs 跨职能型团队</h2><p>这是我又一次见到相关的讨论了，在格鲁夫的《给经理人的第一课》里面也提到了相同的问题。当时，格鲁夫的观点是采用「混合型组织」和「双重汇报」的方式来解决。而本书的作者提出了另外一个思考的角度：沟通的频繁程度。</p>
<p>本书的作者认为，按照复杂系统理论，达成一件事情需要的沟通总量是不变的，所以我们应该让组织的形式更加易于沟通。所以一个人的工作应该归属于职能型团队还是跨职能型团队，就看他和哪边的沟通工作更多。</p>
<p>在这种思考的角度下，作者认为以产品为单位的跨职能型团队是更加符合沟通需求的。因为在开发一款产品时，PM 与开发需要密切地沟通合作，客户端与服务器的开发也需要密切的沟通合作。所以我们应该把他们放在一个团队中，而不应该分开到不同的职能型团队中。</p>
<p>有意思的是，「跨职能型团队」与「决策由组织间自行沟通解决」就构成了敏捷开发中的 Scrum of Scrum 模式。</p>
<img src="/images/management30-1.jpg">
<p>作者在本书中认为（并且他指明具有争议），项目管理、架构级模块、用户界面设计、硬件设计、测试是专业性很强的工作，并且沟通量并没有那么大，可以用职能型专家团队来完成。但是需要服务好项目团队，由项目团队判断职能团队的价值并且建立合适的沟通渠道。</p>
<h2 id="u9002_u5E94"><a href="#u9002_u5E94" class="headerlink" title="适应"></a>适应</h2><p>作者强调企业的组织方式并不是一层不变的，我们可以不变调整适应，如果觉得不合适，就可以继续调整。比如我们发现需要构建出一些架构级的模块时，我们可以临时组建专家团队，当这方面的工作变少时，我们也可以选择将专家团队解散。</p>
<h1 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h1><p>本书还有一些小的翻译问题，例如 P13 把授权团队翻译成赋能团队，P109 把凯文·凯利翻译成科里。</p>
<p>本书的理论部分太过散乱，并且没有重点。实践部分的各章节也不成系统。如果为了节省时间，可以直接看每一章最后的小结，从小结中就可以看出结论非常散。</p>
<p>就像本书最后说的那样，不同的管理理论有不同的模型，本书的六大模型并不一定是正确的，它更多是一种看问题的可选角度。所有模型都有错，但有一部分是有用处的就行了，为方法、框架、原则和实践争得死去活来真的没有必要。</p>
<p>本书对于我的价值，就是再一次思考了组织在壮大过程中的各种问题的解决方案，我们公司的团队正在经历人员增长，跨部门的合作也遇到了很多问题，本书有助于我理解这其中的原因。</p>
<p>最后是我整理出来的知识脉络思维导图，这份图带有我个人的主观色彩，一些我不认同的观点没有整理在里面。</p>
<img src="/images/management30-2.jpg">
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/management30-0.jpg">
<h1 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h1><p>最近读完了段念推荐的<a ]]>
    </summary>
    
      <category term="books" scheme="http://blog.devtang.com/tags/books/"/>
    
      <category term="books summary" scheme="http://blog.devtang.com/categories/books-summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[软件开发中的上帝模式与农民模式]]></title>
    <link href="http://blog.devtang.com/2016/07/20/programming-worlds-farmer-and-god/"/>
    <id>http://blog.devtang.com/2016/07/20/programming-worlds-farmer-and-god/</id>
    <published>2016-07-20T12:18:04.000Z</published>
    <updated>2016-09-04T14:29:40.000Z</updated>
    <content type="html"><![CDATA[<img src="/images/god-vs-farmer.jpg">
<p>我在做 iOS 开发的时候，发现自己在写程序的时候，常常处于两种状态的切换，我把这两种状态称为软件开发的上帝模式与农民模式。我先给大家介绍一下这两种模式的特点。</p>
<h2 id="u4E0A_u5E1D_u6A21_u5F0F"><a href="#u4E0A_u5E1D_u6A21_u5F0F" class="headerlink" title="上帝模式"></a>上帝模式</h2><p>处于上帝模式时，我需要构思整个应用的架构设计，如何进行类之间的组织和信息的传递。我有可能会在纸上画一些类图，把关键的几个类之间关系构思清楚。这就类似于建筑师画设计图纸一样。</p>
<p>在这个阶段，我的大脑是努力工作的，我会利用我学到的《设计模式》、《重构》、《代码大全》中的架构知识，先把类的关系组织好。然后我会深入到每一类的实现细节，构思好每个类大概怎么实现，这个过程又会利用了如何命名、DRY 原则、单一职责原则等编程知识。</p>
<p>而这一切的行为，都是在纸上完成的，我甚至会关掉电脑屏幕，因为电脑屏幕前有很多影响注意力的信息（例如 QQ、微信、邮件等）。</p>
<h2 id="u519C_u6C11_u6A21_u5F0F"><a href="#u519C_u6C11_u6A21_u5F0F" class="headerlink" title="农民模式"></a>农民模式</h2><p>当一切构思基本完成，我就会打开 Xcode，开始我的农民模式工作。</p>
<p>在农民模式，我会专心于将我刚刚构思好的内容变成一行行真实的代码。由于已经想得比较清楚，这个过程通常更多是一种体力活，或者好听一点，是一个手艺人的体力活。对于农民模式的我来说，我需要知道 iOS 开发的各种基本知识，以及一些常见的提升效率的工作方式，以便我能够更快地完成编码工作。</p>
<p>在农民模式中，我会注意集中精力，因为虽然实现代码是偏体力活的事情，但是思路如果断掉，接上的话还是会花费不少时间。有一些同事会喜欢戴上耳机，以避免干扰，也是这个道理。</p>
<h2 id="u4E00_u4E2A_u4F8B_u5B50"><a href="#u4E00_u4E2A_u4F8B_u5B50" class="headerlink" title="一个例子"></a>一个例子</h2><p>举一个具体的例子，下图是小猿搜题的发现页面，它明显是用一个 Group Style 的 <code>UITableView</code> 来实现的，每个 Cell 的样式也非常简单：左边有一张 <code>UIImageView</code>，接着是一个 <code>UILabel</code>，然后是靠右侧的 <code>UILabel</code>（可能内容为空）以及最右侧的一张右剪头的 <code>UIImageView</code>。</p>
<img src="/images/ape-discovery.png">
<p>由于这个发现页面可以由服务器来定制，所以我在上帝模式的时候，先构思好我需要实现：</p>
<ul>
<li>一个 View Controller 类（<code>DiscoveryViewController</code>），用于展示整个界面</li>
<li>一个 TableViewCell 类（<code>DiscoveryTableViewCell</code>），用于描述一个条目</li>
<li>一个 ViewModel 类（<code>DiscoveryConfig</code>），用于描述发现页的内容</li>
<li>一个网络请求类（<code>GetDiscoveryApi</code>），用于获得服务器的定制信息</li>
<li>在持久化层（<code>StorageAgent</code>）增加两个方法，用于获取上次缓存的定制内容（<code>getDiscoveryConfig</code>）以及保存最新的定制内容 (<code>saveDiscoveryConfig</code>）</li>
<li>一个负责更新的类（<code>ConfigUpdateAgent</code>），用于处理更新的时机选择（<code>checkUpdate</code>）</li>
</ul>
<p>我还会把每个类大概的成员变量和成员方法名想好。构思完成之后，我脱下上帝的黄袍（别问我上帝为什么要穿黄袍，我也不知道），换上农民干活的麻布衣服，开始搬代码了。我先把这些类都建好，方法名命名好。接着我开始填一个一个的方法名的实现。</p>
<p>每一个类的实现过程都可以看作一个阶段性的成果，这个时候我会稍微休息一下，然后继续搬砖。</p>
<p>最终，我完成了所有代码，然后开始运行。咦，为什么运行效果不对？我赶紧打起精神，开始调试起代码来。这个时候，我一会儿切换成上帝模式，审视自己的架构是否有漏洞。一会儿切换成农民模式，看自己是不是不小心敲错了一些代码细节。</p>
<p>最终，代码被全部编写完成并且运行正常了。</p>
<h2 id="u4E00_u4E9B_u6280_u5DE7"><a href="#u4E00_u4E9B_u6280_u5DE7" class="headerlink" title="一些技巧"></a>一些技巧</h2><h3 id="u4E0A_u5E1D_u6A21_u5F0F_u7684_u6280_u5DE7"><a href="#u4E0A_u5E1D_u6A21_u5F0F_u7684_u6280_u5DE7" class="headerlink" title="上帝模式的技巧"></a>上帝模式的技巧</h3><p>上帝模式中，切忌不应该过于着急动手，把一切的细节都想清楚，看看有没有特殊情况没有考虑到。如果一开始设计得不好，那么真正实现到最后才发现，那么农民模式下写的代码就白白浪费了。</p>
<p>上帝模式的工作是可以脱离电脑来实施的，这意味着我们可以拉上同事，找个白板讨论。我们也可以在上下班的路上思考。</p>
<p>经过讨论的上帝模式的产出会更加靠谱，在我们公司，我们会在 Scrum 的计划会议的后半程，用出牌的方式估计每一个工作的 Story Point，而具体的估计方式，就是以上帝模式将整个工作细化，使得我们大家能够明确出农民模式下的编码工作量到底是多少。</p>
<p>软件开发能力的提高，上帝模式会比农民模式更难，在上帝模式下工作得出色的同学，会进一步成为架构师，成为更复杂架构的设计规划者。</p>
<p>在软件开发书籍中，涉及上帝模式的图书也有很多，例如《设计模式》和《重构》，但是好的架构都是无法脱离实际业务的，所以大多数程序员都无法通过简单地看书就提高自己的上帝模式的能力，更多的提高方式是工作一段时间，有一些实际体会之后再看书，就能够理解书中的道理。</p>
<h3 id="u519C_u6C11_u6A21_u5F0F_u7684_u6280_u5DE7"><a href="#u519C_u6C11_u6A21_u5F0F_u7684_u6280_u5DE7" class="headerlink" title="农民模式的技巧"></a>农民模式的技巧</h3><p>农民模式中，效率是第一要素。所以，保证自己的专注力是非常重要的。在这方面，「番茄工作法」是一个不错的实践方式。</p>
<p>农民模式中，应该尽量采用「宽度优先搜索」的方式来完成任务，而不是「深度优先搜索」的方式。在上面的例子中，我先将各种类的类名和方法名填好，然后再完善细节就是一种「宽度优先搜索」的方式。这种方式下，我们不需要额外的「栈空间」来保存工作的上下文。</p>
<p>为了更容易理解，我来举一个「深度优先搜索」的工作方式，在上面的例子中，我先写界面的 Controller 类，写到一半发现需要 TableViewCell，于是就去写 TableViewCell。TableViewCell 写到一半发现需要先实现 ViewModel，然后就跑去实现 ViewModel，ViewModel 实现完发现需要缓存起来，于是就跑去写缓存逻辑。这种工作方式下，我就需要分别记住：Controller 的进度和 TableViewCell 的进度，以便我之后继续完善它们。这种方式其实就相当于一次「打断」，因为我把 Controller 的编写硬生生拆成了两次，这样就使得我需要更多时间回记上次的思路。</p>
<p>农民模式中，我们应该尽量提升自己的代码输入效率。比如将常用的代码片段保存在 Xcode 的 Snippets 中或者 Dash 中，在组织内规范好统一的命名约定和规则，熟悉 iOS 的各种调试技巧，都可以使自己更快把上帝模式下的蓝图转换成实际代码。</p>
<p>相对于上帝模式，大部分同学都会轻视农民模式下的效率。比如写一会儿代码聊一会儿 QQ。比如由于自己事先积累不够，很多基本的 iOS 开发知识还需要查资料和文档。农民模式下的效率低下，使得一个人看起来工作了很久，却没有什么产出。</p>
<p>在 iOS 领域，我个人的经验表明，我在一整天的农民模式中，最高可以产出 1000 行左右的代码。2012 年猿题库创业初期时，我在 4 个月的紧张工作中，平均每天的代码产出约为 500 行。</p>
<h2 id="u4E00_u4E9B_u95EE_u9898"><a href="#u4E00_u4E9B_u95EE_u9898" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="u63D0_u5347_u4E0A_u5E1D_u6A21_u5F0F_u80FD_u529B"><a href="#u63D0_u5347_u4E0A_u5E1D_u6A21_u5F0F_u80FD_u529B" class="headerlink" title="提升上帝模式能力"></a>提升上帝模式能力</h3><p>很多 iOS 开发新手对于提升自己上帝模式的能力感觉到无从下手，建议这部分同学可以多分析一些优秀的开源软件的架构，同时阅读一些相关的书籍。另外，每一次恶心的重构都是一次难得的经验，说明之前的架构设计不够优雅，结合自身的业务特点，多思考多讨论，慢慢地就会培养出自己对于架构的一些心得了。</p>
<h3 id="u63D0_u5347_u519C_u6C11_u6A21_u5F0F_u6548_u7387"><a href="#u63D0_u5347_u519C_u6C11_u6A21_u5F0F_u6548_u7387" class="headerlink" title="提升农民模式效率"></a>提升农民模式效率</h3><p>很多 iOS 开发新手对于农民模式不够重视。一个程序员大部分时间都应该是处于农民模式的，农民模式决定了我们产出的效率，而很多人只重视工作时间，不重视工作效率，使得自己的产出非常低下。</p>
<p>提升自己的农民模式能力，建议使用「番茄工作法」并且做一些时间记录，平时多学习一些最新的 iOS 开发知识，以便减少自己的知识盲区。专注于自己的精力是否集中，如果觉得太累，就活动一下或者适当休息，不应该强迫自己 Coding。</p>
<h3 id="u8B66_u60D5_u6DF7_u642D_u6A21_u5F0F"><a href="#u8B66_u60D5_u6DF7_u642D_u6A21_u5F0F" class="headerlink" title="警惕混搭模式"></a>警惕混搭模式</h3><p>混搭模式，类似于练功人士的「走火入魔」，专指那些在上帝模式没有想清楚，就马上切入农民模式写代码，写到一半代码又切到上帝模式思考。边写边想的混搭模式使得自己想的时候不够清晰，写的时候又不够专注，两边都不讨好。通常刚刚入行的人都处于这种混搭的模式，不但写出来的代码容易有逻辑错误，而且速度很慢。</p>
<h2 id="u7ED3_u8BED"><a href="#u7ED3_u8BED" class="headerlink" title="结语"></a>结语</h2><p>上帝模式与农民模式这个叫法是我自己发明出来的，你喜欢这个世界观设定吗？</p>
<p>我们在程序的世界里，一会儿是高高在上的上帝，一会儿又是埋头干苦活的农民，想想也挺奇妙的。</p>
<p>愿大家在这个世界中玩得开心！</p>
<p>如果你感兴趣，这儿还有我的另一个世界观设定：<a href="/2016/09/04/open-your-brain/">《打开你的脑洞》</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/god-vs-farmer.jpg">
<p>我在做 iOS 开发的时候，发现自己在写程序的时候，常常处于两种状态的切换，我把这两种状态称为软件开发的上帝模式与农民模式。我先给大家介绍一下这两种模式的特点。</p>
<h2 id="u4E0A_]]>
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[成长为 iOS 大 V 的秘密]]></title>
    <link href="http://blog.devtang.com/2016/07/20/from-newbie-to-master/"/>
    <id>http://blog.devtang.com/2016/07/20/from-newbie-to-master/</id>
    <published>2016-07-20T12:17:53.000Z</published>
    <updated>2016-07-20T12:17:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>毫不谦虚地说，我是国内 iOS 开发的大 V。我从 2011 年底开始自学 iOS 开发，经过 3 年时间，到 2014 年底，我不但写作了上百篇 iOS 相关的原创博客文章，完成《iOS 开发进阶》，同时还成功运营了「iOS 开发」这个国内最多 iOS 开发者订阅的微信公众号，另外我的微博（@唐巧_boy）粉丝超过 4 万。我是如何做到的呢？</p>
<p>在武侠小说里面，武林高手通常生来就有慧根，是个学武奇才，就像周星驰《功夫》里面的星仔。另外，他们还通常会得到世外高人的指点，要么获得别人毕生修炼的真气（虚竹），要么获得绝世武功的秘笈（段誉）。</p>
<p>而我其实在这些方面都很弱。我在计算机编程方面并算不上聪明，我在北京师范大学读计算机专业，这是一个全国综合实力排在 100 名开外的院系，离清华北大差得不是一个级别。而我的语文高考成绩，刚刚及格。我的英语成绩也很一般。</p>
<p>更不凑巧的是，我当年学 iOS 的时候，国内资料很少，而且公司里面没人有时间指导我，我只能自学。很难想像，我这么差的背景的人，能够成为 iOS 大 V，能够写文章，甚至还出书。</p>
<p>那么，我成为 iOS 大 V 的秘密是什么呢？请听我慢慢道来。</p>
<h2 id="u5927_V__3D__u5927_u725B__uFF1F"><a href="#u5927_V__3D__u5927_u725B__uFF1F" class="headerlink" title="大 V = 大牛 ？"></a>大 V = 大牛 ？</h2><p>首先我想讨论一个问题：「大 V = 大牛」吗？其实很多时候，这两者并不能直接划等号。</p>
<p>我见过很多大牛，他们水平很高，但是他们或者不善于表达，或者不善于写作，或者表达和写作都没问题，但是他们并不喜欢在网上高谈阔论，更喜欢把时间花在研究技术问题上。这些大牛，就像《天龙八部》里面的扫地僧一样，不曾被外界知晓，但是技术实力一流。</p>
<p>我也见过一些大 V，技术实力一般，但是喜欢分享自己的心得，喜欢翻译国外的博文。他们有一些人甚至不善于写作，写文章喜欢大段大段地贴代码。但是，随着他在这方面不断地锻炼，他们慢慢地写作得越来越好，讲解技术越来越通俗易懂。因为频繁地交流，他们的技术实习也在不停地进步。虽然这些大 V 的真实水平可能比不过一些从不分享的大牛，但是他们的能力至少是达标的。</p>
<p>所以，我对这个问题的答案是：大 V 不等于 大牛。但是，要成为一个大 V，至少应该具备以下条件：</p>
<ul>
<li>能力是达标的，不应该有明显的能力问题。</li>
<li>喜欢交流，认识很多业界同行。</li>
<li>喜欢表达，通过写作和线下分享来传播知识。</li>
</ul>
<p>所以，我们不应该盲目崇拜大 V，他们只是喜欢分享而已。</p>
<p>那我算一个 iOS 的大牛吗？我不知道。有一些人认可我，也有一些人觉得我很一般。但是我的原创文章、我的书、我开源的代码、我做的每次分享都公开在网上。我仅仅用三年时间在 iOS 领域做到这些也是不容易的，所以希望大家继续看下去，看我是如何做到的。</p>
<h2 id="u5947_u6750_+__u79D8_u7B08_uFF1F"><a href="#u5947_u6750_+__u79D8_u7B08_uFF1F" class="headerlink" title="奇材 + 秘笈？"></a>奇材 + 秘笈？</h2><img src="/images/ios-secret-1.jpg">
<p>在武侠小说里面，武林高手通常生来就有慧根，是个学武奇才，就像周星驰《功夫》里面的星仔。另外，他们还通常会得到世外高人的指点，要么像虚竹那样，获得别人毕生修炼的真气；要么像段誉那样，获得绝世武功的秘笈。</p>
<h3 id="u6211_u662F_u4E00_u4E2A_u5947_u6750_u5417_uFF1F"><a href="#u6211_u662F_u4E00_u4E2A_u5947_u6750_u5417_uFF1F" class="headerlink" title="我是一个奇材吗？"></a>我是一个奇材吗？</h3><p>我是一个奇材吗？显然不是。</p>
<p>我从小就喜欢计算机，从高中就开始接触计算机编程，我还记得那个时候学的是 PASCAL 语言，从那个时候起，我就展现出在计算机编程方面的愚钝。我还记得我和同班的小伙伴一起学习递归枚举，他大概只花了三天就看懂了相关的代码，而我花了整整一个月。</p>
<p>我的高考成绩其实也很一般，不过我运气比较好，当年全国试行自主招生，我靠着自主招生进入了北京师范大学，在北京师范大学读计算机专业。这是一个全国综合实力排在 100 名开外的院系，离清华北大差得不是一个级别。我靠着高中时积累的一点点编程知识混进了学校的 ACM 校队，之后一直比赛成绩一般，直到研一的时候才免强获得了亚洲区的区域赛金奖。</p>
<p>我的实习经历也非常不顺。我从大四就开始找实习，一直被拒，到研究生阶段还是找不到实习。最终还是靠刚刚说的区域赛金奖，获得了来自赞助商 IBM 的一次实习机会。</p>
<p>大 V 需要擅长写作，而我的高考语文成绩，92 分（满分 150），刚刚及格。我的英语成绩也很一般。</p>
<p>所以，我就是一个天资普通得不能再普通的一个人。</p>
<h3 id="u6211_u6709_u9AD8_u4EBA_u6307_u70B9_u5417_uFF1F"><a href="#u6211_u6709_u9AD8_u4EBA_u6307_u70B9_u5417_uFF1F" class="headerlink" title="我有高人指点吗？"></a>我有高人指点吗？</h3><p>那我有高人指点吗？很可惜，也没有。</p>
<p>我不但没有高人指点，而且我学习 iOS 开发的过程极其曲折。</p>
<h4 id="u6CA1_u6709_u8D44_u6599"><a href="#u6CA1_u6709_u8D44_u6599" class="headerlink" title="没有资料"></a>没有资料</h4><p>我是在 2011 年底开始学习 iOS 开发的。当时我厌倦了服务器端的开发，感觉移动互联网很火，于是想做 iOS 开发。但是，当时移动开发刚刚兴起，国内外甚至都没有一本像样的 iOS 图书。当时除了一本入门的基础书，教你使用各种 UI 控件外，就只剩下一本满是代码的书，教你各种小技巧（比如如何读文件，如果发个网络请求之类）。</p>
<h4 id="u6CA1_u6709_u4EBA_u5E26"><a href="#u6CA1_u6709_u4EBA_u5E26" class="headerlink" title="没有人带"></a>没有人带</h4><p>我当时在有道云笔记组，负责 iOS 开发的同学并不太擅长带人，所以我很遗憾基本上只能自己学习和研究 iOS 开发知识。</p>
<h4 id="u5B66_u4E60_u65F6_u95F4_u77ED"><a href="#u5B66_u4E60_u65F6_u95F4_u77ED" class="headerlink" title="学习时间短"></a>学习时间短</h4><p>我以为公司会给我一些时间让我学习 iOS 开发，但是真实的情况是，我只有两周的时间学习！两周之后，我就需要帮忙修复线上的 iOS 代码，以及参与功能开发了。</p>
<p>我不知道大家是花多久学完 iOS 开发的。有一些同学报 iOS 培训班，在有老师讲的情况下，一学就学三个月。而我，只有两周的时间。</p>
<h4 id="u80CC_u666F_u77E5_u8BC6_u4E3A_u96F6"><a href="#u80CC_u666F_u77E5_u8BC6_u4E3A_u96F6" class="headerlink" title="背景知识为零"></a>背景知识为零</h4><p>我在学习 iOS 开发前，对客户端开发一无所知，我当时没有用过 Mac 机，没有 iPhone。一切东西对我来说都还非常神秘。</p>
<h4 id="u6CA1_u6709_u65F6_u95F4_u63D0_u9AD8"><a href="#u6CA1_u6709_u65F6_u95F4_u63D0_u9AD8" class="headerlink" title="没有时间提高"></a>没有时间提高</h4><p>我从 2011 年底开始学 iOS 开发，到 2012 年 5 月份就离职创业了。那个时候因为创业刚开始，我们进入了长期的 6 天，每天 11 小时的高强度工作方式。我想提高自己的 iOS 水平，但是每天工作下来都很晚了，而且写了一整天代码精疲力尽，实在没有时间提高。</p>
<h3 id="u6211_u7684_u6210_u5C31"><a href="#u6211_u7684_u6210_u5C31" class="headerlink" title="我的成就"></a>我的成就</h3><p>但是，在自身条件一般，环境恶劣的情况下，我还是做到了自我的快速成长，并且收获了很多成绩：</p>
<ul>
<li>我从开始学习 iOS 开发半年后，就开始独立负责 iOS 端的开发工作。</li>
<li>我从 2013 年 1 月创建「iOS 开发」微信公众帐号，然后每周坚持更新，现在有超过 3 万 5 千的订阅量。</li>
<li>我从 2013 年底开始撰写《iOS 开发进阶》，2014 年底完成。另外我还写了一年多 「iOS 开发周报」。</li>
<li>我将公司的网络库，Key-Value 存储库开源，GitHub 上 Star 数上千。</li>
<li>我坚持写 iOS 技术博客，现在完成了超过 100 篇原创文章，很多发表在 InfoQ 和 《程序员》杂志上。</li>
</ul>
<h2 id="u6211_u662F_u5982_u4F55_u505A_u5230_u7684"><a href="#u6211_u662F_u5982_u4F55_u505A_u5230_u7684" class="headerlink" title="我是如何做到的"></a>我是如何做到的</h2><p>那我是如何做到的呢？</p>
<h3 id="u89E3_u51B3_u5165_u95E8_u7684_u95EE_u9898"><a href="#u89E3_u51B3_u5165_u95E8_u7684_u95EE_u9898" class="headerlink" title="解决入门的问题"></a>解决入门的问题</h3><p>学习 iOS 开发，没有相关硬件是不行的。但是苹果的硬件都很贵，很多人舍不得买，装黑苹果来解决，这种行为我简单尝试了一下就放弃了，因为黑苹果有着太多的兼容和性能问题，在这上面浪费时间非常不值得。于是，我还是自己掏钱买了 Mac 机和 iPad，为了省钱，我买的第一台 Macbook Pro 是从同学手中买的二手货，我买 iPad 而不是 iPhone，其实也是为了省钱，因为 iPad 不但相对来说更便宜，而且可以同时做 iPhone 和 iPad 的开发用。</p>
<p>国内没有学习资料怎么办呢？只有硬着头皮看国外的资料呗。其实当时国外的资料也不多。我是一个视觉型的学习者，所以我看的是斯坦福的iOS开发视频课程。前几节课看的是网易云课堂上的带中文字幕的版本，但是字幕只到第10课，后面的课程我就直接看的无字幕的原始视频。</p>
<p>两周的时间虽然比起外面的培训机构短很多。但是安排得好的话，每天还是可以学习很多。我大概一周就看完了视频课程，然后就是不停地写程序练习。虽然没有人带我，但是当时有道公司内部的所有 iOS 工程代码我其实也是可以用来学习的。所以我仔细阅读了有道词典和有道云笔记的代码。</p>
<p>于是，两周之后，我就开始参与工程Bug的修复工作了。差不多一个月左右，我就开始负责一部分开发工作了。</p>
<h3 id="u89E3_u51B3_u4EA4_u6D41_u8BA8_u8BBA_u7684_u95EE_u9898"><a href="#u89E3_u51B3_u4EA4_u6D41_u8BA8_u8BBA_u7684_u95EE_u9898" class="headerlink" title="解决交流讨论的问题"></a>解决交流讨论的问题</h3><p>虽然我很快完成了iOS的入门学习，但是感觉交流很少，很多问题没有人讨论，这对于自己提高开发能力是一个很大的障碍。于是，我开始组织各种分享交流会。</p>
<p>刚开始我尝试在公司内部做这种交流工作，发现推进得非常困难，主要是喜欢分享的人还是比较少。有道的技术牛人其实是不少的，但是就像我刚刚说的那样，大牛不等于大V，大牛也不代表着乐于并且擅长分享。所以，经过了快两个月的推进，技术交流会还是非常少。大家都会说没有时间准备，而我又没有任何权力在强行要求同事做分享。</p>
<p>我苦恼了很久，最终到创业的时候，才发现我之前眼光太浅，世界那么大，我为什么要把交流的圈子定在公司内部呢？在创业的时候，我开始从全国范围内主动寻找和结识乐于分享的 iOS 开发者。我会从微博，博客，技术分享会，前同事等各种渠道去寻找这样的朋友。其实，对于乐于分享的人来说，你要做的事情就只是把他们聚到一起就行了，他们自己就会开始不停地交流、讨论、分享。</p>
<h3 id="u89E3_u51B3_u63D0_u9AD8_u7684_u95EE_u9898"><a href="#u89E3_u51B3_u63D0_u9AD8_u7684_u95EE_u9898" class="headerlink" title="解决提高的问题"></a>解决提高的问题</h3><p>大部分 iOS 开发者在入门一段时间后，就会苦于不知道如何提高。其实，提高的方式有很多，只要舍得花时间。我在提升个人技能方面，主要做了这些事情：</p>
<ul>
<li>看 WWDC 的视频。因为由苹果官方提供，并且每年更新，所以 WWDC 是学习 iOS 开发新知识最好的渠道。我利用我每天上下班坐地铁的时间来学习，遇到一些关键的知识在地铁上不好做笔记，我会直接用截屏的方式把这些知识截下来，然后晚上在家里再把内容整理下来。下图是我在 Evernote 中记录的 WWDC 笔记，大家可以看到，一共有 70 多篇。</li>
</ul>
<img src="/images/wwdc-notes.jpg">
<ul>
<li><p>看 iOS 的博客。我用 RSS 聚合阅读器定阅了大量国外 iOS 的博客，然后利用碎片时间阅读。我的 Evernote 上收藏了上百篇的精选文章。我的碎片时间大多是上厕所和睡觉前。那个时候智能手机刚刚兴起，还没有微信，我感觉现在很难做到在手机上安静地做阅读了。</p>
</li>
<li><p>写作。对于我个人来说，我会坚持用写作的方式来学习。因为我觉得写作是知识理解的最高层次。美国教育心理学家 Bloom 将知识认知历程维度分为 6 个层次，分别为：记忆、理解、应用、分析、评鉴、创造。如下图所示，层次越高，表示对知识的掌握程度越深。我每次觉得我理解了一个知识后，就会用写作的方式把它写下来，通常情况下，在写作的过程中我都会发现自己的一些认知不足，从而通过二次学习来完善。</p>
</li>
</ul>
<img src="/images/why-write-1.png">
<h2 id="u6211_u7684_u5FC3_u5F97"><a href="#u6211_u7684_u5FC3_u5F97" class="headerlink" title="我的心得"></a>我的心得</h2><p>在这个过程中，我也发现了一些以前认识上的误区。</p>
<h3 id="u65F6_u95F4_u662F_u6700_u5927_u7684_u501F_u53E3"><a href="#u65F6_u95F4_u662F_u6700_u5927_u7684_u501F_u53E3" class="headerlink" title="时间是最大的借口"></a>时间是最大的借口</h3><p>有一些朋友评价我：「迷之高产」，他们不理解我是如何有那么多时间搞定各种事情。</p>
<p>在我看来，当你做不好某一件事情时，时间通常是最大的借口。</p>
<h4 id="u65F6_u95F4_u662F_u53EF_u4EE5_u5BFB_u627E_u7684"><a href="#u65F6_u95F4_u662F_u53EF_u4EE5_u5BFB_u627E_u7684" class="headerlink" title="时间是可以寻找的"></a>时间是可以寻找的</h4><p>我学习 iOS 开发半年后，我就从网易离职参与创业了。当时我们需要工作 6 天，每天 11 个小时。但是，这仍然没有影响我学习、交流、甚至写作。其实你仔细记录自己的时间之后，就会发现有很多时间可以利用。</p>
<p>比如我在那段紧张的创业期间，就利用每天上下班的时间，在地铁上看 WWDC 视频。</p>
<p>我自认为最夸张的事情是利用陪老婆逛街的时候写博客文章。当时我老婆和岳母在商场里面逛，我就在手机上写文章。其实试过之后发现，在手机上写文章的速度也算不上慢。</p>
<p>现在，我有了小孩，周末常常要陪伴她。我就会特别珍惜晚上 8 点后她睡着后那段时间，我可以利用那段时间做一些学习和写作的事情。</p>
<h4 id="u65F6_u95F4_u662F_u53EF_u4EE5_u6324_u7684"><a href="#u65F6_u95F4_u662F_u53EF_u4EE5_u6324_u7684" class="headerlink" title="时间是可以挤的"></a>时间是可以挤的</h4><p>如果我们提高工作的效率，那么做同样的事情，你就会比别人花费更少的时间。这样我们就可以挤出时间做别的事情。</p>
<p>程序员这个工作特点是需要集中精力，所以应该尽量避免被别人打断。推荐大家使用番茄工作法，让自己能够在短时间内集中精力做一件事情。久而久之，你就可以快速进入编程状态。</p>
<p>另外，写代码之前，先在纸上把逻辑写清楚，这样会使得自己 Coding 的过程非常顺利。有一些人喜欢边写边想，这样如果遇上一些没想清楚的情况，就可能白写一部分代码。在纸上把逻辑先写清楚后，Coding 的节奏会非常轻松，因为你的脑海里已经有整个架构的蓝图了，即使中间暂停休息一下，也不会有很大的影响。</p>
<h4 id="u5E73_u8861_u597D_u65F6_u95F4_u548C_u4EE3_u7801_u8D28_u91CF"><a href="#u5E73_u8861_u597D_u65F6_u95F4_u548C_u4EE3_u7801_u8D28_u91CF" class="headerlink" title="平衡好时间和代码质量"></a>平衡好时间和代码质量</h4><p>有一些人写代码，完全是堆功能，不考虑可维护性，你如果批评他，他就会义正言辞地说：时间不够！</p>
<p>另外有一些人，追求代码质量，宁愿项目长时间延期，也不愿意写出看起来脏的代码。遇到需求变更，总是要进行大幅度的重构，以保证新的架构是最优雅的。</p>
<p>我有很长一段时间都是后者，但是我现在觉得，我们不应该走极端，我们应该平衡好时间花费和代码质量。</p>
<p>从商业上来说，按时交付产品比什么都重要，一家创业公司，如果不能按时交付产品，可能它就会面临资金不够的问题而倒闭，也可能被竞争对手抢先推出类似产品，在竞争上失去时间上的优势。</p>
<p>所以一个好的程序员，更应该有「大局观」，在保证代码质量的同时，也能明白，良好的代码质量其实是为了长期的可持续地按时响应需求变更、人员变更，以达到「按时交付产品」。</p>
<h3 id="u8FD0_u7528_u5FC3_u667A"><a href="#u8FD0_u7528_u5FC3_u667A" class="headerlink" title="运用心智"></a>运用心智</h3><h4 id="u4EC0_u4E48_u662F_u5FC3_u667A"><a href="#u4EC0_u4E48_u662F_u5FC3_u667A" class="headerlink" title="什么是心智"></a>什么是心智</h4><p>关于什么是心智，我来讲一个故事吧。</p>
<p>我老婆是学幼儿教育的，她给我讲过一个故事，幼儿教育学家为了研究小孩的自控能力，会做一个叫做 <a href="http://baike.baidu.com/link?url=8EKV-tjzMsKQFVnSnr1Ar3VWf8iCbKTdvH1AZHJXzWcBPJO38hQZd12cKIbrjgQIgjl-tmqPhfR4Z8oFPjcpXK" target="_blank" rel="external">延迟满足</a> 的实验。这个实验（<a href="https://www.youtube.com/watch?v=Yo4WF3cSd9Q" target="_blank" rel="external">相关视频</a>）是这样的：</p>
<blockquote>
<p>在一个屋子里面，让小孩坐在一个书桌前，然后给小孩一个糖果，告诉他：「我 15 分钟后回来，如果你在我回来之前都不吃这个糖果，等我回来后就再奖励你一个糖果」。</p>
<p>通常情况下，很多小孩都无法抵抗糖果的诱惑而很快将它吃掉。而研究发现，那些坚持到最后的小孩，自控能力更强，在随后的跟踪研究发现，这些小孩能够在学校取得更好的学习成绩。</p>
</blockquote>
<p>研究人员对这些表现出优秀控制力的小孩很好奇，想进一步分析出他们有什么特点。研究人员甚至用功能磁共振成像仪为他们的脑部进行扫描，希望通过对比扫描图，找出大脑对 “延迟满足” 能力起作用的特定区域。此外，研究人员还进行了不同的基因测试，以研究是否存在控制 “延迟满足” 能力的遗传因素。</p>
<p>最后，研究人员发现，这些小孩都会非常简单的一招：转移注意力。具体来说，他们会在特别想吃糖果的时候，选择做别的事情来让自己大脑暂时不那么关注糖果。比如他们可能会唱歌，在桌子上写字，将头转向窗外。</p>
<p>这个故事就是关于心智最好的解释，小朋友教会我们不要抵抗人性，要利用人性。他们知道自己喜欢吃糖果，但是他并不是强制让自己不喜欢吃糖果了，而是用别的办法来达到目的。</p>
<p>如果你合理利用人智，那么就会收获巨大的威力。</p>
<h4 id="u57F9_u517B_u4E60_u60EF"><a href="#u57F9_u517B_u4E60_u60EF" class="headerlink" title="培养习惯"></a>培养习惯</h4><p>培养习惯应该是最简单的心智利用手段。人们对做一件事情会有惰性，但是一旦培养成习惯之后，不做这件事情反倒不习惯了。所以那些值得做的事情，大家都应该在开始的一段时间内，强行让自己在固定时间点做这些事情，久而久之，就会形成习惯，让它成为你受益终身的习惯。</p>
<p>不止是个人，组织的协作也应该培养习惯。我们在用 Scrum 用项目推进时，会固定每天和每周的开会时间，以及产品的上线时间，这些都会让组织减小对于协作的管理成本。比如每周一晚上需要完成 App 的测试，大家就会自发地紧张起来，将遗留的 Bug 一一修复。</p>
<h4 id="u8BBE_u7ACB_u76EE_u6807"><a href="#u8BBE_u7ACB_u76EE_u6807" class="headerlink" title="设立目标"></a>设立目标</h4><p>很多事情，当我们没有目标的时候，执行的动力就会差很多。所以，我在学习 iOS 开发的时候，会不断地给自己设立一些目标，通过不断强化这个目标，这样使得我在学习的时候意愿变得更强了。当目标达成之后，成就感和自信心就由此产生，从而激励我们更加努力，由此产生出良性的循环。</p>
<p>具体来说，我在学习初期不断要求自己将学习内容整理成博客文章，我要求自己每个月至少写一篇。我的第一篇 iOS 文章是从 2011 年 8 月开始写的，那个时候我才刚刚开始学习 iOS，当时看苹果的内存管理的官方文档，有一些心得，就写了下来。然后关于写博客这件事情我就一直没有间断，一直写到现在。</p>
<p>在文章积累到一定程度之后，我给自己设立的第二个目标是完成一本书。我希望借此机会，将自己没有系统整理的知识再梳理一次。这个目标对我其实挑战很大，最终我从中学会了将图书的撰写拆分成很多小的目标，然后一步一步达成。</p>
<p>把大目标拆分成小的阶段性目标这一点很重要，它使得整体的时间安排是适当的，不会刚开始过紧或过松。另一方面，很一次完成小任务的满足感，可以适当让我们的大脑产生喜悦，最终使得任务更容易被搞定。</p>
<h4 id="u5BFB_u627E_u6210_u5C31_u611F"><a href="#u5BFB_u627E_u6210_u5C31_u611F" class="headerlink" title="寻找成就感"></a>寻找成就感</h4><p>人是需要激励的，《异类》一书中讲到，那些刚开始只有一点点天赋的人，因为不断被人夸奖，从而使得他们更加强化自己擅长的事情，从而获得成功。</p>
<p>所以，我们应该学会给自己做的事情寻找成就感。除了通过完成目标来获得成就感以外，我们还可以有更多的成就感来源。对于我来说：</p>
<ul>
<li>我会从写文章分享知识这个过程中寻找成就感，因为这帮助了其他人学习 iOS 知识。</li>
<li>我会从给 InfoQ 和《程序员》杂志的投稿中寻找成就感，因为它让我感觉到了知识被认可。</li>
<li>我还会从粉丝的转发和评论中寻找成就感，它让我小小的内心充满了被认可的感觉。</li>
<li>我还会从文章的打赏中寻找成就感，毕竟金钱打赏是对文章质量最直接的肯定。</li>
</ul>
<p>这些成就感，驱使着我，让我更加努力学习，停不下来。</p>
<h4 id="u9002_u5EA6_u575A_u6301"><a href="#u9002_u5EA6_u575A_u6301" class="headerlink" title="适度坚持"></a>适度坚持</h4><p>总会有一些事情，你不那么容易找到目标和成就感。</p>
<p>我在 2013 年开始做「iOS 开发」微信公众号的时候，就有这种感觉。每周都要坚持推送消息很辛苦，而且刚开始的时候，粉丝很少，没有人看。我有无数个理由停止做这件事情。但是，我有一个习惯，就是决定做一件事情之后，先做一段时间再说。</p>
<p>当时我给自己设立的目标是，先做半年再说。于是，我就继续更新。机会总是给有准备的人，做着做着，我发现关注数慢慢上升了，我就给自己打气说，慢慢会好起来，于是又继续坚持。终于坚持到 2015 年，我的关注数超过 2 万，也开始有了广告收入。</p>
<p>还是《异类》那本书里面提到了 10000 小时定理，这个观点其实给我很大的鼓舞，它让我们所有人意识到，不论你是否聪明，你都可以用简单地坚持，来成为某个领域的专家。我之前做 iOS 开发时就想，我平时上班一天 8 小时，一年 260 天工作，这样一年是 2000 小时，我大概需要 5 年才能成为 iOS 专家。但是如果我每天工作 10 小时，每周末多拿一天学习 iOS 开发知识，那么我一年可以花在 iOS 上的时间是 10（小时） * 310（天）= 3100 小时，这样我只需要 3 年多一点，就可以成为 iOS 专家了。</p>
<p>我不但是这么 YY 的，我也是这么做的，是的，我就是希望我用三年的时间，达到别人五年的工作经验。事实上，我确实做到了，我相信所有其他人也都可以做到。</p>
<h2 id="u8425_u9500"><a href="#u8425_u9500" class="headerlink" title="营销"></a>营销</h2><p>虽然和个人成长没关系，但是成为大 V 确实需要一些个人的营销。我在这方面其实做得不多，细数下来，我做过下面这些营销的事情：</p>
<ul>
<li>「iOS 开发」公众号坚持三个月后，请冯大辉帮忙推荐过一次，请池建强推荐过一次。</li>
<li>我的微博坚持只发 iOS 开发的消息，刚开始的时候没有粉丝，我请池建强帮我转过几次文章。</li>
<li>图书出版后，和出版社合作搞过几次转发送书活动。</li>
<li>和荔枝软件搞过几次 Mac 正版软件特惠活动。</li>
</ul>
<p>我在营销上其实做得不算好，我在成为大 V 这条路上真正的成功秘诀，还是不断坚持。</p>
<h2 id="u603B_u7ED3"><a href="#u603B_u7ED3" class="headerlink" title="总结"></a>总结</h2><p>总结一下本文的观点：</p>
<ul>
<li>大 V 不等于 大牛，不要盲目崇拜。</li>
<li>时间是最大的借口。</li>
<li>合理运用心智（培养习惯、设立目标、寻找成就感）。</li>
<li>适度坚持。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u524D_u8A00"><a href="#u524D_u8A00" class="headerlink" title="前言"></a>前言</h2><p>毫不谦虚地说，我是国内 iOS 开发的大 V。我从 2011 年底开始自学 iOS 开发，经过 3 年时]]>
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[写在创业四周年]]></title>
    <link href="http://blog.devtang.com/2016/07/16/startup-4th-year-summary/"/>
    <id>http://blog.devtang.com/2016/07/16/startup-4th-year-summary/</id>
    <published>2016-07-16T04:07:05.000Z</published>
    <updated>2016-07-16T04:46:53.000Z</updated>
    <content type="html"><![CDATA[<h2 id="u5E8F"><a href="#u5E8F" class="headerlink" title="序"></a>序</h2><p>一转眼，创业四周年了。我从来没有想到过，我的职业生涯中，待得最久的是猿题库这家创业公司。2016 年 5 月 31 日，我们宣布了获得腾讯的 <a href="http://tech.qq.com/a/20160531/011514.htm" target="_blank" rel="external">4000 万美元投资</a>，这是腾讯在 K12 在线教育领域最大的一笔战略投资。拿 BAT 的钱更像是一种站队行为，腾讯拥有 QQ 和微信两大社交平台，如果要选的话，腾讯理应是最好的选择。趁着拿到融资的机会，我们顺便把公司名从「猿题库」改成了「猿辅导」，我们希望从「猿辅导」中，找到合适的商业化道路。</p>
<img src="/images/yuanfudao-company.jpg">
<p>说说我个人吧，和两年前的创业总结 <a href="/2014/10/01/startup-2nd-year-summary/">《写在创业两周年》</a> 相比，我最大的变化是从一名纯 iOS 开发，转变为一个项目负责人。</p>
<h2 id="u65F6_u95F4_u6D41_u6C34"><a href="#u65F6_u95F4_u6D41_u6C34" class="headerlink" title="时间流水"></a>时间流水</h2><p>2014 年 7 月小猿搜题立项，我开始负责这个项目。刚开始我一边负责 iOS 的开发工作，一边参与产品稿和 UI 稿的讨论。当时的我以非技术工作还很陌生，基本上不太敢提意见，不过产品稿都有郭常圳和产品委员会把关，因此并不会带来什么问题。</p>
<p>2014 年 9 月底小猿搜题第一版上线，我们当时评测显示和竞争对手算法差别不大，不过产品层面上，还有许多需要打磨的地方。</p>
<p>2015 年初，我们认为产品打磨得差不多了，于是开始了大规模的运营推广。我们很快在用户量和搜索量上，将某个竞争对手甩开了。</p>
<p>我在负责小猿搜题项目时，首先需要解决的是将 iOS 开发的事情交出去，如果我一直在 iOS 开发具体工作上耗费精力，我就无法关注别的事情了。但是招聘从来都不是一件容易的事情，相比 iOS 开发，我又觉得产品和项目管理的事情更重要，所以在 2014 年的最后两个月，有一些 iOS 端的开发工作被我延后了。</p>
<p>2015 年 1 月，我招到了一个 iOS 开发新手，于是开始带她，差不多带了 3 个月之后，我发现她基本可以独立工作了，所以就只做 code review 的事情。后来 6 月份的时候，我又招过来一个 iOS 开发新手，我指导他做了一些安全方面的工作之后，他们开始相互 review 代码，我参与过几次之后，我发现他们做得很好，所以就不再参与了。</p>
<p>安卓方面，刚开始从猿题库项目组调来一个应届生新人，同时猿题库的安卓负责人参与我们的 review 工作。也是等到这个新人熟悉工作后，他就开始独立开发了，之后补充了一个社招的安卓开发。</p>
<p>小猿搜题在 2015 上半年，相继补充了测试工程师，服务器开发，web 前端开发，产品实习生。到 2015 下半年，我们的团队基本成型了。</p>
<p>2016 年，我们的团队继续扩张，我有些管理不过来。我尝试将一些事情授权给别人，比如培养技术负责人和产品负责人。我们也明确了 iOS 和 Android 端的负责人，以便于更有效地沟通。</p>
<h2 id="u4E2A_u4EBA_u6210_u957F"><a href="#u4E2A_u4EBA_u6210_u957F" class="headerlink" title="个人成长"></a>个人成长</h2><p>对于我来说，我开始像<a href="/2016/02/16/the-leadership-pipeline-summary/">《领导梯队》</a>那本书讲的那样，一开始经历了从管理自我到管理他人的阶段，而现在又开始经历从管理他人到管理经理人员的阶段。</p>
<h3 id="u4ECE_u7BA1_u7406_u81EA_u6211_u5230_u7BA1_u7406_u4ED6_u4EBA"><a href="#u4ECE_u7BA1_u7406_u81EA_u6211_u5230_u7BA1_u7406_u4ED6_u4EBA" class="headerlink" title="从管理自我到管理他人"></a>从管理自我到管理他人</h3><p>从管理自我到管理他人，我学习到的技能点包括：</p>
<p>授权。在从管理自我到管理他人的阶段中，我学会了尽量放弃自己亲力亲为，特别是开发工作。因为开发工作需要长时间集中注意力，而我本身的工作性质导致沟通工作较多，容易被打断。足够的授权才能为自己争取到额外的时间，在授权的同时加以一些监督和检查，就又可以即保证新人得到锻炼，又保证这些工作的质量。</p>
<p>项目进展。管理他人另一个需要注意的就是关注于项目的进展，通常情况下都会有各种各样的问题需要介入讨论，保证进度。</p>
<p>沟通。管理他人中，沟通是一个很重要的环节，新人刚来的一个月是我特别花精力沟通的阶段。沟通的技能包括一对一沟通、绩效沟通、以及平常对于错误行为的及时纠正。其实保持友谊也很重要，不过人多了可能也确实比较难以做到。</p>
<p>流程。关注于规则是否有利于大家工作，是否需要改进。</p>
<h3 id="u4ECE_u7BA1_u7406_u4ED6_u4EBA_u5230_u7BA1_u7406_u7ECF_u7406_u4EBA_u5458"><a href="#u4ECE_u7BA1_u7406_u4ED6_u4EBA_u5230_u7BA1_u7406_u7ECF_u7406_u4EBA_u5458" class="headerlink" title="从管理他人到管理经理人员"></a>从管理他人到管理经理人员</h3><p>从管理他人到管理经理人员阶段，我正在学习。</p>
<p>时间点。我发现在这一阶段，我无法细致到项目进展的每一方面，所以我对于项目进展的推动更多地依赖于别人了。而我只能强调时间点。具体的细节问题推进，我更多地依赖于别人。</p>
<p>沟通。由于人员变多，我只能和重要的负责人进行沟通了，不过和他们的沟通频率应该变得比以前更高，我通过和他们沟通，来获得更细致的项目进展问题和流程上的问题。</p>
<p>其它沟通。沟通不止是向下的，也包括向上的沟通和横向的跨组沟通。这部分工作也开始越来越占用时间了。</p>
<p>产品。我更多地思考产品方向，看一些产品数据或问题。</p>
<p>培训。我开始做一些培训，给相关负责人或者是新员工。给负责人的培训更多是通过聊天讨论的方式，因为这样一对一的讨论是更容易达成一致的。给新员工的培训更多是一对多分享的方式。</p>
<h3 id="u601D_u8003"><a href="#u601D_u8003" class="headerlink" title="思考"></a>思考</h3><p>看起来管理他人的职位会涉及具体的业务细节的讨论和推进，属于在「一线」的管理人员，这些管理人员通常也具备不错的专业能力。</p>
<p>管理经理人员的职位会相对脱离「一线」，他的工作会有更多沟通的事情，和老大的向上沟通，和运营，研究，市场，HR 部门以及兄弟产品的横向沟通，和负责人的沟通，这些事情会占用他大量的时间。</p>
<p>但是这个职位也同样需要有一些「一线」的工作，例如看产品数据，试用产品功能，讨论产品稿，思考产品方向，了解开发的业务进展等。</p>
<p>总之我还没有很好地描述和定义清楚该职位的工作内容，很多时候我感觉自己插手的事情也相当多，当前的我还需要更多的学习和体会。</p>
<p>希望自己继续学习和总结。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="u5E8F"><a href="#u5E8F" class="headerlink" title="序"></a>序</h2><p>一转眼，创业四周年了。我从来没有想到过，我的职业生涯中，待得最久的是猿题库这家创业公司。2016 年 5 月 31 日，我们宣布了获]]>
    </summary>
    
      <category term="startup" scheme="http://blog.devtang.com/tags/startup/"/>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[被中国黑客玩坏的苹果]]></title>
    <link href="http://blog.devtang.com/2016/07/16/hack-way-through-apple/"/>
    <id>http://blog.devtang.com/2016/07/16/hack-way-through-apple/</id>
    <published>2016-07-16T01:25:21.000Z</published>
    <updated>2016-07-16T03:23:02.000Z</updated>
    <content type="html"><![CDATA[<p>最近从几个做 iOS 开发的小伙伴那儿听说了几个发垃圾邮件的黑科技，利用的都是苹果的一些小「漏洞」，实在是让人觉得中国人的「创新」能力太强，分享给大家。</p>
<h2 id="u65B9_u6CD5_u4E00"><a href="#u65B9_u6CD5_u4E00" class="headerlink" title="方法一"></a>方法一</h2><img src="/images/hack-way-1.jpg">
<p>详细的办法在上面的这个截图中解释了，简单来说就是将自己的帐号名改成广告信息，然后不停修改自己的安全邮箱，于是这些含有自己的帐号名（其实就是广告）的邮件就通过苹果的服务器发送出来了。各大邮箱厂家确实是不敢贸然屏蔽苹果的邮件的，所以垃圾邮件被顺利发送出去。</p>
<p>我有一个小伙伴就收到了这样一封垃圾邮件：</p>
<img src="/images/hack-way-2.jpg">
<p>苹果在发现这个漏洞被利用后，简单把用户昵称在邮件中不再显示了，不过可以看得出来改动非常匆忙：</p>
<img src="/images/hack-way-3.jpg">
<h2 id="u65B9_u6CD5_u4E8C"><a href="#u65B9_u6CD5_u4E8C" class="headerlink" title="方法二"></a>方法二</h2><p>在方法一被苹果封堵后，前两天，梁杰发现了一个新的垃圾邮件发送行为。这次利用的是苹果的共享日历的功能。黑客利用将广告以日历日程的形式共享给大家，以便获得展示广告的能力。</p>
<img src="/images/hack-way-4.jpg">
<img src="/images/hack-way-5.jpg">
<h2 id="u80CC_u540E_u7684_u5229_u76CA"><a href="#u80CC_u540E_u7684_u5229_u76CA" class="headerlink" title="背后的利益"></a>背后的利益</h2><p><del> 由于对岛国大片的热爱，</del> 我还真研究了一下这个垃圾邮件所描述的网址。这个网址打开后跳到一个看起来有各种诱人视频的播放列表中，然后弹出了如下 <a href="http://www.avv06.com/movie/play_480.html" target="_blank" rel="external">付款说明</a>：</p>
<img src="/images/hack-way-6.jpg">
<p>这个页面明显是一个骗人的假页面，因为上面描述的是：「付款之后刷新页面，尽享奇妙之旅」。我理解「奇妙之旅」应该就是可以播放视频吧。但是，这个付款的二维码是一个微信支付的二维码，所以，所有用户看到的二维码是一样的。</p>
<p>这就带来一个问题：假如有一个用户付款完，这个时候有两个用户同时按刷新，服务器端根本就无法知道是哪个用户付的款。所以，这根本就是一个诈骗的网站。</p>
<p>这个诈骗网站同时考虑了警察的心理，假如有人受骗报警，诈骗 18.8 元这种事情，对于警察叔叔来说，根本就达不到立案标准。如果警察叔叔要立案，他需要收集到上千个受害人的信息。另外，中国的办案还涉及管辖权，如果这个网站不在北京，那么北京的警察叔叔还需要找网站所在地的警察联合配合，这种事情想想都头大。于是，这个网站到现在还是能够正常打开（已经安全存在快一个月了）。</p>
<p>但是这如果不是一个诈骗网站，而是一个黄色网站，那么性质就完全不一样了。黄赌毒是警方重点的打击对象，警方跨辖区合作起来更有动力。相对诈骗网站来说，黄色网站的站长也会有更大的压力，而且就 18.8 这点钱，估计连站长的流量费都挣不回来。</p>
<h2 id="u6728_u9A6C_u7684_u4F20_u64AD"><a href="#u6728_u9A6C_u7684_u4F20_u64AD" class="headerlink" title="木马的传播"></a>木马的传播</h2><p>除以上面这种骗 18.8 的诈骗网站外，还有一种黑客行为是传播木马。通常的形式是要求你下载一款专用的视频播放器，用于看岛国大片。这类视频播放器通常都含有木马。</p>
<p>对于 Android 来说，视频播放器在安装时会要求大量系统级权限，然后在你不经意的时候，发一条扣费短信。注意，这种扣费短信通常只有 1 毛钱，对于这种报案，你可以想像一下警察叔叔的心理阴影面积了，他可能得收集上万个报案人的信息，才能达到立案的涉案金额，进而合并立案。在黑客界，这种扣费行为被称为最安全的挣钱方式，因为现有的法律使得警方的办案成本非常高。</p>
<p>对于 iOS 来说，视频播放器通常使用企业证书安装。有些小白用户或许觉得我的 iPhone 没有越狱，安装这类 App 没有风险，那么你就 too young too native 了。企业证书的安装的 App 不经苹果审核，黑客可以随意利用私有 API 进行各种信息的窃取。这里我就不教大家太多了，简单说一个过时的技巧吧：在 iOS 9 以前，企业证书的包可以覆盖同名的在 AppStore 上下载的 App。所以黑客可以利用一些小弹窗提示：「你的微信有新版本，是否更新」，从而把你的微信覆盖成它的修改后的版本。之后黑客可以做的事情就太多了。</p>
<h2 id="u5199_u5728_u6700_u540E"><a href="#u5199_u5728_u6700_u540E" class="headerlink" title="写在最后"></a>写在最后</h2><p>安全的故事和事故每天都在上演，我们大家都得小心。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近从几个做 iOS 开发的小伙伴那儿听说了几个发垃圾邮件的黑科技，利用的都是苹果的一些小「漏洞」，实在是让人觉得中国人的「创新」能力太强，分享给大家。</p>
<h2 id="u65B9_u6CD5_u4E00"><a href="#u65B9_u6CD5_u4E00" ]]>
    </summary>
    
      <category term="iOS" scheme="http://blog.devtang.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[技术主导型公司的困境]]></title>
    <link href="http://blog.devtang.com/2016/07/09/lead-by-tech-companys-trap/"/>
    <id>http://blog.devtang.com/2016/07/09/lead-by-tech-companys-trap/</id>
    <published>2016-07-09T14:39:55.000Z</published>
    <updated>2016-07-09T14:46:24.000Z</updated>
    <content type="html"><![CDATA[<p>Google 公司给了全世界的程序员一个理想公司的范例：招最聪明的人、工程师驱动项目、宽松的工作气氛、鼓励创新、20% 的自由时间⋯⋯我早年以为这样的公司一定会成功，但是工作到现在我却发现，那些模仿 Google 文化和工作方式的公司很多却活得很艰难。</p>
<h2 id="u8C4C_u8C46_u835A_u7684_u6545_u4E8B"><a href="#u8C4C_u8C46_u835A_u7684_u6545_u4E8B" class="headerlink" title="豌豆荚的故事"></a>豌豆荚的故事</h2><p>就在几天前，阿里巴巴宣布 <a href="http://tech.sina.com.cn/i/2016-07-05/doc-ifxtsatm1409353.shtml" target="_blank" rel="external">收购豌豆荚</a>，而交易价格并未对外公开。业界传言收购价为 <a href="http://tech.sina.com.cn/i/2016-07-02/doc-ifxtsatn7967833.shtml" target="_blank" rel="external">2 亿美金</a>，但是豌豆荚联合创始人王俊煜并未承认。不管是不是 2 亿美金，一个未公开的收购价很可能是为了避免让大家觉得尴尬，这种尴尬很可能是豌豆荚的收购价格并不乐观。</p>
<p>从前面几轮豌豆荚的融资信息来看，豌豆荚仅仅在 2014 年就获得了 1.2 亿美金的融资，当时估值为 <a href="http://tech.sina.com.cn/i/2016-07-03/doc-ifxtsatn7994939.shtml" target="_blank" rel="external">10 亿美金</a>，如果最终以 2 亿美金卖掉，那么真正归属给股东的回报应该寥寥无几，而众多员工的期权价值应该也就此成为一张废纸。</p>
<p>豌豆荚有类典型的技术主导型公司的气质。豌豆荚创始团队许多来自 Google，王俊煜从实习到毕业一直都在 Google，豌豆荚内部文化极其自由开放、透明及扁平化。</p>
<p>但是技术主导型公司通常还会有另一个特点，就是会「看不起」运营工作，在 <a href="http://tech.sina.com.cn/zl/post/detail/i/2016-07-06/pid_8507905.htm" target="_blank" rel="external">《多面豌豆荚》</a> 一文中，作者写道：</p>
<blockquote>
<p>豌豆荚工程师文化非常强，在公司内部，产品设计师和工程师是项目主导，运营、市场、商务的地位都排在第二位。虽然豌豆荚把产品经理叫做 “产品设计师”，但豌豆荚的产品设计师是几乎不支持运营、市场或商务活动的，这类设计需求全部外包。外包一方面成本很高，另一方面周期比较长，因为设计师不在旁边，沟通成本要高许多。</p>
</blockquote>
<p>作为最早的安卓应用市场，豌豆荚曾经是市场的老大，而它现在已经跌出了第一梯队。﻿豌豆荚在应用内搜索方面的尝试一直不太成功。作为一家技术人才聚集的公司，豌豆荚更喜欢用技术解决问题，应用内搜索看起来更像是一个技术难题，而不是用户需求。随着应用市场业务的萎靡以及新产品没有获得突破，豌豆荚不得已只能卖给阿里。</p>
<h2 id="u6709_u9053_u7684_u6545_u4E8B"><a href="#u6709_u9053_u7684_u6545_u4E8B" class="headerlink" title="有道的故事"></a>有道的故事</h2><p>网易有道是我第一份正式工作的东家，也是我认为文化非常贴近 Google 文化的公司。有道的创始人周枫是清华的年级第一，在清华读书时就是个风云人物。有道在成立之初，聚集了大量清华的同学。有道良好的技术氛围进而吸引了大量高质量的程序员，在我入职有道时，有道员工大部分都由清华北大的同学构成。有道员工里面不乏大量 ACM 世界总决赛获奖选手和 NOI 金牌获奖选手。公司内部重视代码 code review，重视 wiki，重视技术分享，甚至也有 20% 时间的个人项目。我还记得当时利用个人项目时间和黄东旭一起开发了 Mac 版的有道云笔记。</p>
<p>但是，技术上的优势并没有给有道带来商业上的成功。有道搜索在苦苦挣扎一段时间后，直接放弃了搜索业务。有道云笔记一直没能找到合适的用户增长点和盈利模式。有道惠惠做得非常早，但是仍然用户比较小众。现在看来，只有有道词典算是成功的一个产品，但收入应该远远没有达到支撑有道上市的程度。</p>
<p>有道在商业上的坎坷也造成了人员的动荡。早年的大量高质量工程师，待在有道是为了创业成功，以他们的实力很容易挑选新的公司。所以在有道发展下坡的时候，好多员工去了 Google、BAT 等其他一线互联网公司，而我也是在那个时候选择了加入猿题库创业。﻿</p>
<h2 id="u8C46_u74E3_u7684_u6545_u4E8B"><a href="#u8C46_u74E3_u7684_u6545_u4E8B" class="headerlink" title="豆瓣的故事"></a>豆瓣的故事</h2><p>豆瓣也是一个技术气氛浓厚的公司，阿北自己就是程序员出身，所以豆瓣的工程师氛围特别强，强到产品要做一个功能，技术会挑战他，会问为什么要做这个功能。但是豆瓣按自己节奏做事的风格，很快错过了移动互联网的机会。</p>
<h2 id="u6280_u672F_u4E3B_u5BFC_u578B_u516C_u53F8_u7684_u77ED_u677F"><a href="#u6280_u672F_u4E3B_u5BFC_u578B_u516C_u53F8_u7684_u77ED_u677F" class="headerlink" title="技术主导型公司的短板"></a>技术主导型公司的短板</h2><p>豌豆荚、有道、豆瓣，为什么聚集了大量优秀的技术人才还是没能成功？其实从一个侧面说明一个创业项目的成功，技术只是各个条件中的一环而已。除开技术本身，我们还需要在产品，设计，运营，内容，市场推广等多方面努力，才可能在竞争中占据优势。</p>
<p>有道的运营推广在我看来一直是公司的短板，有道背靠网易，习惯于借助网易的大流量来获取用户，间接影响了有道自己在获得用户方面的尝试。</p>
<p>以前听别人说「技术驱动或技术主导」的公司，我会觉得很酷。现在我反倒觉得，一家公司技术太强势，可能就会压制产品或运营的声音，影响整体的竞争力。</p>
<p>看看周围成功的创业企业，也有大量的公司刚开始并没有牛逼的技术，但是毫不影响别人在创业路上的成长。比如滴滴，直到很晚才找到合适的技术合伙人。比如罗永浩，早期的 ROM 团队和硬件团队实力并不强。比如京东，早期用微软的 ASP 技术开发网站。比如现在很火的健身应用 Keep，一直没有很强的技术团队。</p>
<p>但是他们都成功了，现在的滴滴聚集了大量优秀的 iOS 开发者，还拿了苹果 10 亿美金的投资。罗永浩的软硬件团队早已脱胎换骨。京东已经不断地向业界输出着他们的技术积累。我相信 Keep 也会很好地解决掉他们的技术问题。</p>
<p>所以，除了少量像 Google 无人驾驶或者马斯克造火箭这类前沿技术创新项目外，技术在创业之路上，99% 的时候都不是关键因素，所以我们才会看着一家又一家顶着技术光环公司的陨落。</p>
<p>猿题库其实也算是一家顶着技术光环的公司，我们给高于大部分互联网公司的 offer，努力把以前在有道做的好的技术实践给传承下来。但是我们更明白，商业的成功才是最重要的，所以我们更看重按时交付产品，更关注用户数据。当产品上线时间和代码质量产生直接冲突时，我们会选择按时上线产品而做一些 dirty &amp; quick 的技术实现。更进一步地，我认为好的代码质量其实也是为按时上线服务的，我们写好的代码，只是为了以后在修改需求或者增加人手的时候，更节省时间，最终的结果还是减少了开发时间，保证了按时上线。</p>
<p>技术是一家互联网公司成功的基础，但是除了技术本身，产品方向、UI&amp;UE、市场推广、运营活动、内容建设同样重要。作为技术人员，我们不应该抱有技术改变一切的优越感，而应该是以一个谦卑的姿态，让技术更好地为产品服务，因为只有产品的成功才算是一家企业真正的成功。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Google 公司给了全世界的程序员一个理想公司的范例：招最聪明的人、工程师驱动项目、宽松的工作气氛、鼓励创新、20% 的自由时间⋯⋯我早年以为这样的公司一定会成功，但是工作到现在我却发现，那些模仿 Google 文化和工作方式的公司很多却活得很艰难。</p>
<h2 id]]>
    </summary>
    
      <category term="summary" scheme="http://blog.devtang.com/categories/summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[永远的致胜联盟 - 读《独裁者手册》]]></title>
    <link href="http://blog.devtang.com/2016/07/07/the-dictators-handbook-summary/"/>
    <id>http://blog.devtang.com/2016/07/07/the-dictators-handbook-summary/</id>
    <published>2016-07-07T14:24:17.000Z</published>
    <updated>2016-07-07T14:28:11.000Z</updated>
    <content type="html"><![CDATA[<img src="/images/dictators-handbook-book.jpg">
<h1 id="u8BFB_u4E66_u5FC3_u5F97"><a href="#u8BFB_u4E66_u5FC3_u5F97" class="headerlink" title="读书心得"></a>读书心得</h1><p>我们古代有句名言「水能载舟，亦能覆舟」，意思是一国之君应该尊重民意，执政为民，这样才能造就国家的富强。但是本书通过大量现代社会中的独裁国家的例子来告诉我们，其实独裁者的政治安全与人民的幸福生活并没有什么直接关系。这些独裁者的安危只与一个有关系：他是否能够构建好「致胜联盟」。</p>
<p>很有意思的是，本书中的大量例子来自「民主国家」美国。因为作者看来，独裁国家和民主国家的统治者在本质上都是一样的，都是追求服务于「致胜联盟」，所以我们在本书中看到了一个统一的关于政治生存的理论。</p>
<p>在我介绍本书的理论前，我们看看这个发生在美国的贝尔市的政治丑闻吧。</p>
<blockquote>
<p>罗伯特·里佐是贝尔小城的前市政经理，该城人口大约为36600人，位于洛杉矶周边，是一座主要由西班牙裔和拉丁裔构成的贫困小城。年人均收入远低于加州和全美的平均水平。超过四分之一的劳动人口生活在贫困线以下。</p>
<p>罗伯特·里佐做了17年的市政经理。罗伯特·里佐在1993年被聘任时的年薪是72000美元，经过17年到他2010年夏天被迫下台时，他的年薪达到了令人震惊的78万美元。</p>
<p>罗伯特·里佐作为市政经理的薪酬与美国其他政府官员相比如何呢？美国总统的年薪是40万美元。加州州长的年薪是20多万美元。与贝尔市紧邻的洛杉矶市市长年薪刚过20万美元。</p>
<p>我们自然会认为罗伯特·里佐肯定一直在设法窃取钱财，2010年夏天贝尔市丑闻发生时，加州总检察长承诺将对罗伯特·里佐是否违法展开调查。他的举动含蓄表达了一个清楚的看法：没有人会每年付给一座小城的市政经理近80万美元。然而，事情的真相比预想的要复杂得多。 </p>
<p>整件事其实是一种精明的政治操作，是由贝尔市的选民以及代表他们的市议员们间接批准的，再沾一点点盗窃的边。 </p>
</blockquote>
<p>罗伯特·里佐是如何做到这一点的呢？结论就是他构建了一个小的「致胜联盟」。他首先发起了一个投票，那场投票的目的是决定是否将贝尔市由“一般城市”转变为“宪章城市”，啥叫“宪章城市”呢？就是城市的政策由市议员决定，而不是由加州来决定。当然，罗伯特·里佐为此解释说：这可以给贝尔市更多的自治权，以摆脱遥远的州政府。</p>
<p>这样的投票其实很难被人理解其背后的影响，所以全市只吸引了400人来参与投票。于是，这个投票被通过后，罗伯特·里佐和市议员利用“宪章城市”的自治权，制定了很多政策，使得他们可以获得大量利益。于是，里佐和这些市议员合法地领取着高昂薪水。</p>
<p>最终，加州总检察长甚至无法对他们定罪，因为一切都是合法的。最终找的罪名竟然是他们拿了薪水，但是没有开相应的会议。所以，假如罗伯特·里佐每月再和这些议员「聚一聚」，那么真还拿他没办法了。</p>
<p>在本书的理论中，作者将政治分为三个维度和五个基本法则。</p>
<p>先介绍三个维度，对领导人而言，政治情势可以被分解为三种人群：名义选择人集团、实际选择人集团和致胜联盟。</p>
<ul>
<li>名义选择人集团：包含了所有在选择领导人时至少具有某些法定发言权的人。在美国，指的就是所有合格选民，即所有年满18周岁的公民。</li>
<li>实际选择人集团：真正选择领导人的是这个集团。在沙特阿拉伯的君主政体下，指的就是皇室的高级成员；在英国则指的是支持多数党议员的选民。</li>
<li>致胜联盟：最重要的集团。它是实际选择人集团的一个子集，构成了一个致胜联盟。他们的支持对于一个领导人的政治生存至关重要。</li>
</ul>
<p>领导人有五个基本法则可用于在任何体制下获得成功： </p>
<ul>
<li>法则1：让你的致胜联盟越小越好。</li>
<li>法则2：让你的名义选择人集团越大越好。</li>
<li>法则3：掌控收入的分配。</li>
<li>法则4：支付给你的核心支持者刚好足够确保他们忠诚的钱。</li>
<li>法则5：不要从你的支持者的口袋里挪钱去改善人民的生活。</li>
</ul>
<p>以下是一些解释：</p>
<ul>
<li>法则1：越小的致胜联盟越好提供利益输送。</li>
<li>法则2：一个很大的选择人集团提供了充足的替代支持者，让不可或缺者时刻谨记必须保持忠诚、规规矩矩，不然就会被别人取代。</li>
<li>法则3：有钱才能给致胜联盟输送利益。在刚刚那个贝尔市的故事中，罗伯特·里佐将城市的房产税提高了50%。而巴基斯坦总统阿西夫·阿里·扎尔达里的财富估计高达40亿美元，尽管他统治着一个人均国民收入几乎全球垫底的国家。</li>
<li>法则4：钱少了不够收买忠诚，钱多了就浪费了，而且把支持者的胃口给调大了。</li>
<li>法则5：人民根本就不是威胁，致胜联盟才是真正的威胁。</li>
</ul>
<p>在介绍完政治的三个维度和五个基本法则后，作者从多个角度来验证了他的理论。这些角度包括：</p>
<ul>
<li>上台（第3章）：如果反叛者要成功，通常都是需要原有政府领导人无法构造忠诚的致胜联盟导致的。而这一点具体的原因，可能是财政危机或安全危机。</li>
<li>掌权（第4章）：本章比较了民选领导人和独裁者在维护核心支持者这件事情上的难度。最终指出，因为很难构建小的致胜联盟，所以民选领导人更容易下台。而独裁者开始的时候比较容易被人推翻，但是一旦独裁者构建成功致胜联盟，那么就很难下台了。本章还讨论了公司 CEO 在掌权上可以做的尝试，很多故事都可以在最近的<a href="http://wiki.mbalib.com/wiki/%E4%B8%87%E7%A7%91%E8%82%A1%E6%9D%83%E4%B9%8B%E4%BA%89" target="_blank" rel="external">万科事件</a>中得到印证。</li>
<li>窃贫济富（第5章）：本章主要是讲的如何获得金钱。政治的5个基本法则中，第3条就是掌控收入的分配。如果无法获得足够的金钱，就无法构建致胜联盟，本章介绍了各种获取金钱的渠道。</li>
<li>获取与花费（第6章）：本章讨论可以把钱花在哪些地方，包括：教育、医疗、清洁的饮用水、基础设施建设、自由（出版自由、言论自由、集会自由等）。非常有意思的是，在独裁国家，领导人除了限制自由之外（这一点很好理解），也会限制教育、医疗或基础设施建设，因为这都有助于推翻独裁者的统治。</li>
<li>腐败使人有权（第7章）：对于独裁国家，腐败是一种提供私人报酬的方式，并且这种方式同时可以让动摇的联盟成员随时可能失去特权并被检控。对于民主国家，腐败的表现形式更加多样化，更多以扭曲的公共政策的形式出现，例如为富人的一些健康问题提供更多研究资金、为富人提供更为温和的税收政策等。</li>
<li>对外援助（第8章）：对于独裁国家的援助，很多时候都进了独裁者的口袋，而援助国很多时候对此是知情的，援助国对此睁一只眼闭一只眼的原因是：他在谋求某种政治交换。</li>
<li>反叛中的人民（第9章）：对于人民来说，反对独裁是非常正常的。但是作者指出，如果人民还能够发出反叛或抗议的声音，就说明政府还是相对温和的。真正的独裁者是不会让人有一丝抗议的声音。本章也详细解释了法则5，为什么人民无法构成有效的威胁。</li>
<li>战争、和平与世界秩序（第10章）：对于民主国家，战争和对外援助都是为了同一目的，只是一个更强势，另一个更温和。从另一个角度说明战争更多时候无关公平正义，只是政治行为。</li>
</ul>
<p>最后，在第11章，作者讨论了一些办法来解决前面提到的独裁问题，最直接的办法就是扩大致胜联盟的规模，使得独裁者无法为海量的联盟成员提供私人报酬，所以只能提供面向所有人的公共服务地方式来获得选票。</p>
<p>书中引用了大量的事例，涉及美国，俄罗斯，还有一些独裁国家，也涉及一些上市公司的治理，很多故事从作者的角度看，又是另外一番景象。</p>
<p>最后，我个人认为，本书将政治生存作为论述基础是成立的，因为<a href="https://zh.wikipedia.org/wiki/%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E7%90%86%E8%AE%BA" target="_blank" rel="external">马斯洛的需求理论</a>的最底层除了生理需求就是安全，如果一个人的政治生涯不能拥有安全感，那确实很难谈更高一层的理想。但是，我也不认为此理论就能将政治中所有人性的部分忽视，就像书中也把新加坡的李光耀作为一个特例来解读，这本身就说明本书的理论不是完美的。</p>
<p>这是一本非常有意思的书，推荐给大家，我也画了本书的思维导图（如下所示）。</p>
<img src="/images/dictators-handbook.jpg">
<hr>

<h1 id="u8BFB_u4E66_u7B14_u8BB0"><a href="#u8BFB_u4E66_u7B14_u8BB0" class="headerlink" title="读书笔记"></a>读书笔记</h1><p>以下是更加详细的读书笔记。</p>
<h2 id="u7B2C1_u7AE0_uFF1A_u7EDF_u6CBB_u7684_u89C4_u5219"><a href="#u7B2C1_u7AE0_uFF1A_u7EDF_u6CBB_u7684_u89C4_u5219" class="headerlink" title="第1章：统治的规则"></a>第1章：统治的规则</h2><p>本章从美国一个小城市：贝尔市的政治丑闻说起，介绍贝尔市的市长：罗伯特·里佐 通过购建支持者小联盟，从而在这个城市大肆敛财的故事。</p>
<p>所以本书认为，独裁者的统治逻辑就是这样：</p>
<ol>
<li>政治就是获得和维持政治权力。它与“我们，人民”的普遍幸福无关。</li>
<li>确保政治生存的最好方式是只依靠少数人来上位和在位。这意味着，那些拥有一批同伙可以依靠的独裁者—常常寿终正寝—比民主人士更容易长年掌权。</li>
<li>当这个同伙小集团明白外面还有大把人排队等着取而代之大吃公家饭，最高领导层就具有了如何花钱、如何征税的巨大自由裁量权。</li>
<li>依靠一个支持者小联盟，领导人可以放手大肆提高税率，正如贝尔市那样。</li>
</ol>
<h2 id="u7B2C2_u7AE0_uFF1A_u653F_u6CBB_u7684_u6CD5_u5219"><a href="#u7B2C2_u7AE0_uFF1A_u653F_u6CBB_u7684_u6CD5_u5219" class="headerlink" title="第2章：政治的法则"></a>第2章：政治的法则</h2><blockquote>
<p>为了正确理解政治，我们必须修正一个特别的假设：我们必须停止认为领袖们能够独自领导。 </p>
</blockquote>
<p>所有独裁者都是需要一个核心的幕僚来帮助他做事情的，所以构建这个忠于自己的小联盟致关重要。</p>
<h3 id="u8DEF_u6613_u5341_u56DB_u7684_u6545_u4E8B"><a href="#u8DEF_u6613_u5341_u56DB_u7684_u6545_u4E8B" class="headerlink" title="路易十四的故事"></a>路易十四的故事</h3><p>本章中，作者把路易十四的故事作为例子，来看他是如何构建致胜联盟的。</p>
<blockquote>
<p>他的父王路易十三死后，年仅四岁的路易十四登基。在早期，实际权力掌握在摄政的他母亲手中。她的亲信横征暴敛。到1661年路易十四23岁开始亲政时，法国已处于破产边缘。</p>
<p>国家破产的前景让初掌大权的路易十四身处险境，因为保守派贵族、包括军队将领看到他们的财富和特权在逐渐干涸。这一情况促使这些政治上重要但薄情寡义的朋友开始另找他人来确保他们的财富和特权。面对这样的危机，路易十四必须做出改变，否则将丧失统治权。 </p>
</blockquote>
<p>在以前，国家的高层是在贵族中产生的。但是路易十四做了一件事情：他改变了以前提拔人才的方式，通过从平民中提拔更多人才，特别是军队人才，路易十四成功地增强了致胜联盟的竞争，同时又使得这些平民对他更加忠诚。</p>
<blockquote>
<p>通过提拔众多新人，路易建立了一个对他感恩的新阶层。在这一过程中，他更完整地集中了自己的权威，提升了对宫廷里不少老贵族年金的决定权。这样，他就建立起了一个“绝对”控制的体系，它的成功依赖于军队和新贵族的忠诚，也依赖于限制老贵族的权力，将他们的福祉直接转化为他的福祉。 </p>
</blockquote>
<p>这种改革确实非常有效。最终，路易十四在位 72 年，直到1715年寿终正寝。</p>
<h3 id="u653F_u6CBB_u7684_u4E09_u4E2A_u7EF4_u5EA6"><a href="#u653F_u6CBB_u7684_u4E09_u4E2A_u7EF4_u5EA6" class="headerlink" title="政治的三个维度"></a>政治的三个维度</h3><p>对领导人而言，政治情势可以被分解为三种人群：名义选择人集团、实际选择人集团和致胜联盟。</p>
<ul>
<li>名义选择人集团：包含了所有在选择领导人时至少具有某些法定发言权的人。在美国，指的就是所有合格选民，即所有年满18周岁的公民。</li>
<li>实际选择人集团：真正选择领导人的是这个集团。在沙特阿拉伯的君主政体下，指的就是皇室的高级成员；在英国则指的是支持多数党议员的选民。</li>
<li>致胜联盟：最重要的集团。它是实际选择人集团的一个子集，构成了一个致胜联盟。他们的支持对于一个领导人的政治生存至关重要。</li>
</ul>
<blockquote>
<p>根本上讲，名义选择人就是领导人的潜在支持者；实际选择人则指那些其对领导人的支持确实有重要影响的人；而致胜联盟只包括那些领导人不可或缺的关键支持者。这三种人可简单概括为：可相互替代者、有影响者以及不可或缺者。 </p>
<p>我们的出发点是意识到：任何一个有能力的领导人都希望掌握尽可能多的权力，并尽可能长久地掌握权力。设法利用可相互替代者、有影响者和不可或缺者来达到自己的目的，这就是统治的行为、艺术和科学。</p>
</blockquote>
<h3 id="u653F_u6CBB_u76845_u4E2A_u57FA_u672C_u6CD5_u5219"><a href="#u653F_u6CBB_u76845_u4E2A_u57FA_u672C_u6CD5_u5219" class="headerlink" title="政治的5个基本法则"></a>政治的5个基本法则</h3><p>领导人有5个基本法则可用于在任何体制下获得成功： </p>
<ul>
<li>法则1：让你的致胜联盟越小越好。</li>
<li>法则2：让你的名义选择人集团越大越好。一个很大的选择人集团提供了充足的替代支持者，让不可或缺者时刻谨记必须保持忠诚、规规矩矩，不然就会被别人取代。</li>
<li>法则3：掌控收入的分配。巴基斯坦总统阿西夫·阿里·扎尔达里的财富估计高达40亿美元，尽管他统治着一个人均国民收入几乎全球垫底的国家。</li>
<li>法则4：支付给你的核心支持者刚好足够确保他们忠诚的钱。</li>
<li>法则5：不要从你的支持者的口袋里挪钱去改善人民的生活。</li>
</ul>
<h2 id="u7B2C3_u7AE0_uFF1A_u4E0A_u53F0"><a href="#u7B2C3_u7AE0_uFF1A_u4E0A_u53F0" class="headerlink" title="第3章：上台"></a>第3章：上台</h2><p>本章从领导人上台的角度，来解释上一章提到的三个维度和五个基本法则。</p>
<p>本章讲了很多故事，基本上都是印证了：如果反叛要成功，通常都是需要原有政府领导人无法构造忠诚的致胜联盟导致的。而这一点具体的原因，可能是财政危机或安全危机。</p>
<h3 id="u8D22_u653F_u5371_u673A"><a href="#u8D22_u653F_u5371_u673A" class="headerlink" title="财政危机"></a>财政危机</h3><p>领导人没有钱了。比如由于自然灾难，造成税收减少。比如俄国政府禁酒，造成税收减少1/3。</p>
<blockquote>
<p>饮用伏特加在俄国大众特别是军队中极为盛行。伏特加如此受欢迎且消费量巨大，它构成了俄国政府岁入的三分之一。一旦禁止伏特加买卖，沙皇的收入立刻锐减。而由于战争，他的开销却在持续增长。沙皇很快就没有能力继续收买忠诚。结果就是他的军队拒绝镇压罢工群众和示威者。</p>
</blockquote>
<h3 id="u5B89_u5168_u5371_u673A"><a href="#u5B89_u5168_u5371_u673A" class="headerlink" title="安全危机"></a>安全危机</h3><p>如果领导人因为身体原因快挂了，致胜联盟就会由于安全感缺失，需要寻找新的同盟者。</p>
<blockquote>
<p>王朝式规则在民主国家司空见惯的原因与在独裁国家和君主制国家毫无二致。有谁比家族成员还能更好地保护家族财富和威望？民选官员花小钱赚大钱，享受权力，他们与奥古斯都皇帝或卡洛·甘比诺一样，渴望让自己的子孙享有一样的好处，保护他们的遗产。</p>
</blockquote>
<p>书中还举了阿尔及利来的本·贝拉的愚蠢故事作为例子。</p>
<blockquote>
<p>1965年6月12日，本·贝拉宣布一周之后将举行政治局会议，会上将讨论三个重大事项：（1）改组内阁；（2）撤换军队领导人；（3）清算军中反对派。他随后离开阿尔及尔前往奥兰。 </p>
<p>这一宣示无疑等于告诉他的核心支持者，他将撤换掉他们中的一些人。由于他并没有透露打算具体清除谁，共同的危机感使所有人都起念要除掉他。 </p>
</blockquote>
<h2 id="u7B2C4_u7AE0_uFF1A_u638C_u6743"><a href="#u7B2C4_u7AE0_uFF1A_u638C_u6743" class="headerlink" title="第4章：掌权"></a>第4章：掌权</h2><blockquote>
<p>爬上高位所需的技能与维持大权所需的本领完全不同。</p>
</blockquote>
<p>我们中国也有一句俗话，叫「打江山不易，守江山更难」。对于一个刚刚上台的新领导人，通常都需要调整致胜联盟，使其更加忠诚。韩信帮刘邦打下天下后，韩信本身的存在就成了一个威胁，因为他在军事上太有才能，并且掌握军队大权。范蠡在这一点上就非常聪明，懂得越王勾践「只可共患难不可共富贵」。</p>
<blockquote>
<p>一名老谋深算的新领导人会迅速采取行动将他们当中的一些人清除掉，替换成那些所获利益更能确保其未来忠诚度的人之后，一名领导人的未来权位才有保障。 </p>
</blockquote>
<p>不光是国家领导人符合这种规律，企业的CEO也一样。同国家不同，企业的实际选择人集团很多时候就是公司的董事会成员，而董事会成员因为拥有多数公司股份，加上上市公司的限制，CEO 很难构建致胜联盟。不过，本书中的惠普公司 CEO 的故事中，我们看到了 CEO 菲奥莉娜 通过并购重建董事会成员，以提高致胜联盟的例子。</p>
<blockquote>
<p>也许是为了获得留下来的几位原董事会成员的支持，或也许只是巧合，董事会成员们的报酬发生了显著变化。在菲奥莉娜成为惠普的首席执行官之前，董事会成员获得的报酬（也就是私人好处）在105700美元至110700美元之间。随着菲奥莉娜上台和董事会规模变小，这一数字略微缩减为100000美元至105000美元之间，并在2000年至2003年之间保持不变。但到了2004年，根据惠普公司委托声明书里公布的数据，董事会成员拿到的钱在200000美元至220000美元之间。同一时期，惠普的年化股息稳定在每股0.32美元，惠普的股票表现显著跑输主要股指。事实再清楚不过了：惠普的股价表现低劣、股息不变，而董事们的报酬却翻倍。 </p>
</blockquote>
<p>最近万科的事件当中，王石在投资中引入新的大股东，如果从构建致胜联盟来看，也是非常正确的。新引入的大股东和公司高管很容易处于蜜月期，从而在决策中达成一致。</p>
<blockquote>
<p>一个联盟的最重要的三个特征是：（1）忠诚；（2）忠诚；（3）忠诚。成功的领导人让周围充满自己信赖的朋友和家人，而将任何有野心的支持者清除掉。</p>
<p>当然，有些时候拥有一些能干的顾问是必不可少的。拜占庭、莫卧儿、中国、伊斯兰王国以及许多其他国家的君主想出了一种很有创意的方法来防止这些顾问成为敌手：他们全都在不同时期仰赖宦官。</p>
<p>就算到了现代，选择无法登顶的亲密顾问这一原则仍然有效。萨达姆·侯赛因作为伊斯兰国家伊拉克的总统，却挑选了一名基督徒塔里克·阿齐兹作为二号人物，这不是偶然的。 </p>
</blockquote>
<p>作者也在本章比较了民选领导人和独裁者在维护核心支持者这件事情上的难度。最终指出，因为很难构建小的致胜联盟，所以民选领导人更容易下台。而独裁者开始的时候比较容易被人推翻，但是一旦独裁者构建成功致胜联盟，那么就很难下台了。</p>
<h2 id="u7B2C5_u7AE0_uFF1A_u7A83_u8D2B_u6D4E_u5BCC"><a href="#u7B2C5_u7AE0_uFF1A_u7A83_u8D2B_u6D4E_u5BCC" class="headerlink" title="第5章：窃贫济富"></a>第5章：窃贫济富</h2><p>本章主要是讲的如何获得金钱。政治的5个基本法则中，第3条就是获得掌控收入的分配。如果无法获得足够的金钱，就无法构建致胜联盟。在这方面，书中提到了一些办法。</p>
<h3 id="u7EE7_u627F_u8D22_u5BCC"><a href="#u7EE7_u627F_u8D22_u5BCC" class="headerlink" title="继承财富"></a>继承财富</h3><p>对于民选国家，财政可以从上一任领导班子中获得。但对于独裁者来说，通常这部分金钱是保密的，所以比较难找到。所以，「知道钱在哪里」在独裁国家尤其重要。利比里亚在多伊被推翻后，因为没有人有足够的资源控制全国，每个派别在小范围内收买支持者，所以全国陷入了内战。</p>
<h3 id="u5F81_u7A0E"><a href="#u5F81_u7A0E" class="headerlink" title="征税"></a>征税</h3><p>征税面临三个限制：</p>
<ul>
<li>第一，征税会削弱人们工作的热情。</li>
<li>第二，一些税收方面的负担不可避免地会落到领导人的关键支持者身上。</li>
<li>第三，收税需要专业知识和资源。收税的成本限制了领导人能够榨取什么并影响到征税方法的制定。 </li>
</ul>
<p>一般来讲，第一点限制了独裁国家的税收，第二点限制了民主国家的税收。</p>
<h3 id="u5F00_u91C7_u8D44_u6E90"><a href="#u5F00_u91C7_u8D44_u6E90" class="headerlink" title="开采资源"></a>开采资源</h3><p>相比于征税，直接从自然资源中获得财富要容易得多。资源丰富的国家使独裁统治者有能力大规模地回报支持者并聚集起庞大的财富。但是，因为基本法则五，所以这些钱并不会用于改善人民的生活。</p>
<blockquote>
<p>拥有丰富可开采自然资源的国家系统性地落后于资源稀缺的国家。资源丰富的国家经济增长较差，容易发生内战，比资源稀缺国家更具有独裁性。 </p>
<p>为了确保人民无法协同造反、夺取国家控制权，领导人竭力让联盟以外的人保持贫困、无知和散漫状态。具有讽刺意味的是，原本可以用来解决各种社会问题的石油反倒给领导人提供了将这些问题故意变得更糟的政治动机。 </p>
</blockquote>
<p>在本书中，作者举了尼日利亚的例子，尼日利亚据称拥有世界第十大的石油储备。从1970年到2000年，尼日利亚累计获得3500亿美元的石油收入。但尽管拥有巨大的石油财富，但尼日利亚的人均年收入从1970年的1113美元降至2000年的1084美元，该国成为世界上最穷的国家之一。</p>
<h3 id="u501F_u94B1_26amp_3B_u503A_u52A1_u51CF_u514D"><a href="#u501F_u94B1_26amp_3B_u503A_u52A1_u51CF_u514D" class="headerlink" title="借钱&amp;债务减免"></a>借钱&amp;债务减免</h3><p>通过向别的国家借钱或债务减免来获得财富，这通常都伴随着一些政治条件的交换。</p>
<h2 id="u7B2C6_u7AE0_uFF1A_u83B7_u53D6_u4E0E_u82B1_u8D39"><a href="#u7B2C6_u7AE0_uFF1A_u83B7_u53D6_u4E0E_u82B1_u8D39" class="headerlink" title="第6章：获取与花费"></a>第6章：获取与花费</h2><p>本章讨论可以把钱花在哪些地方，包括：教育、医疗、清洁的饮用水、基础设施建设、自由（出版自由、言论自由、集会自由等）。</p>
<p>非常有意思的是，在独裁国家，领导人除了限制自由之外（这一点很好理解），也会限制教育、医疗或基础设施建设。因为这都有助于推翻独裁者的统治。</p>
<blockquote>
<p>不论是独裁者还是民主领导人都面临相似的问题：什么范围的教育才是适量的？对于那些依赖极少数支持者的领导人来说，答案显而易见。教育机会不能太广泛，以至于普通人，也就是可相互替代者因受到教育而质疑政府的权威。</p>
<p>考察领导人对教育的兴趣，有一个更好的衡量办法，就是看顶尖大学在世界上的分布情况。除了几个特例之外，没有任何一个非民主国家拥有排名世界200强的大学。那些人口较少、依赖大量核心支持者的国家，比如以色列、芬兰、挪威、荷兰、比利时、加拿大，无一不拥有多所大学进入世界200强。</p>
</blockquote>
<p>看到这里我顺便查了一下，中国的清华大学、北京大学排在全球<a href="http://www.qianmu.org/ranking/1528.htm" target="_blank" rel="external">第25名和第41名</a>。</p>
<h2 id="u7B2C7_u7AE0_uFF1A_u8150_u8D25_u4F7F_u4EBA_u6709_u6743"><a href="#u7B2C7_u7AE0_uFF1A_u8150_u8D25_u4F7F_u4EBA_u6709_u6743" class="headerlink" title="第7章：腐败使人有权"></a>第7章：腐败使人有权</h2><p>对于独裁国家，腐败是一种提供私人报酬的方式，并且这种方式同时可以让动摇的联盟成员随时可能失去特权并被检控。</p>
<blockquote>
<p>尽管私人报偿可以直接由政府财政拨给警察，补偿警察忠诚表现的最简单方式就是给予他们自由腐败的空间。工资这么少，他们必定会意识到腐败不仅可以接受也是必须的。然后他们会加倍效忠于政权：首先，他们会感谢政权给他们敛财的机会；其次，他们会明白，如果他们三心二意，将很可能失去特权并被检控。</p>
</blockquote>
<p>对于民主国家，腐败的表现形式更加多样化，例如以扭曲的公共政策的形式出现。例如为富人的一些健康问题提供更多研究资金、为富人提供更为温和的税收政策等。</p>
<blockquote>
<p>富裕人群和共和党候选人总的来说赞成政府对癌症、阿尔茨海默症以及其他老年病的医学研究提供支持，这些老人恰好构成了美国最富有的年龄层。</p>
</blockquote>
<p>本文讨论了两个小致胜联盟的团体：国际足联和国际奥委会的丑闻，并且指出在这种小团体中，腐败几乎是无法避免的，唯一的办法是扩大致胜联盟的数量。</p>
<p>当独裁者通过腐败给予了致胜联盟合理的回报之后，剩下的钱就是他的自由裁量的资金了。他可以把这个钱存在自己秘密的银行帐号上，也可以用于改善人民的生活。不过文章也指出，很多时候改善人民的生活并不是那么容易的事情。</p>
<blockquote>
<p>赫鲁晓夫计划实施一项农业改革。尽管出发点是善良的，赫鲁晓夫的农业计划和实施却是一场灾难。为了取悦赫鲁晓夫，并出于对达不到期望所带来的政治后果的可能担忧，地方官员们承诺尽力去完成他对于提高产量的要求。以苏联原始的农业技术来说，他们的承诺当然不可能实现。赫鲁晓夫的善意理念的结果就是，农民甚至不得不连种牛都杀掉以完成他们的肉类生产配额。</p>
</blockquote>
<p>这一点和中国的大跃进时期遇到的问题如出一辙。</p>
<h2 id="u7B2C8_u7AE0_uFF1A_u5BF9_u5916_u63F4_u52A9"><a href="#u7B2C8_u7AE0_uFF1A_u5BF9_u5916_u63F4_u52A9" class="headerlink" title="第8章：对外援助"></a>第8章：对外援助</h2><p>对于独裁国家的援助，很多时候都进了独裁者的口袋，而援助国很多时候对此是知情的，援助国对此睁一只眼闭一只眼的原因是：他在谋求某种政治交换。</p>
<blockquote>
<p>很难相信援助机构会天真到不明白他们的资金遭误用。也许真相存在于美国国际开发署的另一个目标上—“增进美国外交政策的利益”。也许美国更感兴趣的是在对抗全球恐怖主义的战略中拥有一个可靠的盟友，以及在打击印度洋的索马里海盗方面获得帮助。 </p>
</blockquote>
<p>由于援助很多时候并没有改善人民的生活，所以援助国的形象甚至都是负面的。</p>
<blockquote>
<p>2002年，皮尤研究中心在42个国家展开了一项民意调查。其中一个问题是问人们对美国的看法。在巴基斯坦，69%的受访者表示对美国极其厌恶。在埃及，这个数字是79%。在其他40个国家，平均只有11%的人对美国持有极端负面的评价。然而2002年巴基斯坦和埃及从美国平均获得了16亿美元的经济和军事援助，而其他40个国家平均只获得9700万美元的援助。这一模式被详细的统计分析所证实。获得大量美国援助的国家的人民看来很仇视美国。</p>
</blockquote>
<h2 id="u7B2C9_u7AE0_uFF1A_u53CD_u53DB_u4E2D_u7684_u4EBA_u6C11"><a href="#u7B2C9_u7AE0_uFF1A_u53CD_u53DB_u4E2D_u7684_u4EBA_u6C11" class="headerlink" title="第9章：反叛中的人民"></a>第9章：反叛中的人民</h2><p>对于人民来说，反对独裁是非常正常的。但是作者指出，如果人民还能够发出反叛或抗议的声音，就说明政府还是相对温和的。真正的独裁者是不会让人有一丝抗议的声音。</p>
<blockquote>
<p>谨慎老到的独裁者都将反叛扼杀在萌芽状态。这就是为什么我们一再重申，只有那些愿意做真正肮脏勾当的人才适合盘算成为独裁者。心慈手软的人一眨眼工夫就会被人搞掉。 </p>
</blockquote>
<p>如果军队不对人民的抗议采取措施，通常都表明，独裁者的致胜联盟出现了动摇。「安全部队拿不准是否能保住长期的特权，拒绝镇压群众，两面下注。」这种做法使得安全部队最终是站在胜者的一边的，这是一种更为自保的行为。</p>
<blockquote>
<p>近代以来不少重大政治历史事件，从法国大革命到苏联及其卫星国的崩溃，都缘于政权的核心支持者不愿在关键时刻镇压人民。近年来的所谓“颜色革命”（格鲁吉亚2003年的玫瑰革命、乌克兰2004—2005年的橙色革命以及2005年吉尔吉斯斯坦的郁金香革命），突尼斯的茉莉花革命以及埃及革命，都展现了同一现象。 </p>
</blockquote>
<h2 id="u7B2C10_u7AE0_uFF1A_u6218_u4E89_u3001_u548C_u5E73_u4E0E_u4E16_u754C_u79E9_u5E8F"><a href="#u7B2C10_u7AE0_uFF1A_u6218_u4E89_u3001_u548C_u5E73_u4E0E_u4E16_u754C_u79E9_u5E8F" class="headerlink" title="第10章：战争、和平与世界秩序"></a>第10章：战争、和平与世界秩序</h2><p>对于民主国家，战争和对外援助都是为了同一目的，只是一个更强势，另一个更温和。</p>
<blockquote>
<p>对民主领导人而言，战争不过是达到对外援助想要达到的目标的另一种方式。对外援助收买受援国的政策让步，战争则强加政策让步。</p>
</blockquote>
<p>对于美国来说，中东政策的核心就是能源政策，为的是给美国经济运转带来稳定的能源供给。</p>
<blockquote>
<p>如果说能源政策不是美国中东政策的一个主要决定因素甚至是最主要决定因素，那就太天真了，但这并不意味着是拿士兵的生命去换石油财富。美国的目标是保护石油的供应，因为石油为世界经济机器的运转提供了能源。联盟的目标是经济稳定而不是私人回报。</p>
</blockquote>
<p>由于战争的胜负决定着民主国家领导人的政治安全，所以民主国家更喜欢打肯定赢的战争。</p>
<blockquote>
<p>民主国家专挑软柿子捏毫不稀奇。回顾过去近200年，民主国家赢得了93%由它们挑起的战争。相比之下，非民主国家只赢下60%由它们发起的战争。</p>
</blockquote>
<h2 id="u7B2C11_u7AE0_uFF1A_u600E_u4E48_u529E"><a href="#u7B2C11_u7AE0_uFF1A_u600E_u4E48_u529E" class="headerlink" title="第11章：怎么办"></a>第11章：怎么办</h2><p>本章讨论了一些办法来解决前面提到的独裁问题，最直接的办法就是扩大致胜联盟的规模，使得独裁者无法为海量的联盟成员提供私人报酬，所以只能提供面向所有人的公共服务地方式来获得选票。</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/dictators-handbook-book.jpg">
<h1 id="u8BFB_u4E66_u5FC3_u5F97"><a href="#u8BFB_u4E66_u5FC3_u5F97" class="headerlink" title]]>
    </summary>
    
      <category term="books" scheme="http://blog.devtang.com/tags/books/"/>
    
      <category term="books summary" scheme="http://blog.devtang.com/categories/books-summary/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[美团到底为什么从 AppStore 下架]]></title>
    <link href="http://blog.devtang.com/2016/06/26/why-meituan-is-removed-from-appstore/"/>
    <id>http://blog.devtang.com/2016/06/26/why-meituan-is-removed-from-appstore/</id>
    <published>2016-06-26T15:08:39.000Z</published>
    <updated>2016-06-26T15:28:34.000Z</updated>
    <content type="html"><![CDATA[<img src="/images/meituan.jpg">
<h2 id="u6545_u4E8B_u80CC_u666F"><a href="#u6545_u4E8B_u80CC_u666F" class="headerlink" title="故事背景"></a>故事背景</h2><p>6 月 23 日（上周四）晚上，美团公司旗下的所有 App（包括美团团购、美团外卖、猫眼电影等 13 款）被苹果下架。一时间谣言四起，网上传得最多的原因是美团没有支付牌照，被实名举报，所以被下架了。而美团对外称是由于技术原因下架，正在和苹果沟通。</p>
<p>6 月 24 日上午，美团公司的全线产品重新上架成功。而美团和苹果公司均没有对外详细透露此次下架原因。</p>
<p>但是，此次事件里面反映出很多有意思的细节，值得和大家分析一下。</p>
<h2 id="u5206_u6790"><a href="#u5206_u6790" class="headerlink" title="分析"></a>分析</h2><h3 id="u5FD8_u8BB0_u7EED_u8D39"><a href="#u5FD8_u8BB0_u7EED_u8D39" class="headerlink" title="忘记续费"></a>忘记续费</h3><p>首先我们来分析一下美团是否是因为忘记续费而被下架。做 iOS 开发的应该都知道，当我们的开发者帐号快要到期时，iTunesConnect 后台的顶部会出现黄色的警告提示，另外开发者的邮箱也会收到相应的邮件提醒。</p>
<p>美团旗下有 13 款应用，按照应用发版的频率，肯定会有工程师看到 iTunesConnect 后台的警告。因此，忘记续费这种事情实在是不太可能发生的。</p>
<h3 id="u724C_u7167_u95EE_u9898"><a href="#u724C_u7167_u95EE_u9898" class="headerlink" title="牌照问题"></a>牌照问题</h3><p>我们再来看看网上传得最多的理由：牌照问题。美团确确实实没有支付牌照，但是，如果真的是因为这个理由被全线下架，那么为什么仅仅过了一天又全线上架了？</p>
<p>美团到现在也没有获得支付牌照，它旗下的 13 款应用在恢复上架后也没有做明显的功能改动。所以如果它因为这个理由被下架，那么理应在获得牌照，或者关闭相应功能后才能重新上架。</p>
<p>我查了一下，在恢复上架后，美团的应用最后更新时间是 6 月 20 日，美团外卖的最后更新时间是 6 月 2 日。这就说明这些 App 并没有做任何功能改动就重新上架了。</p>
<img src="/images/meituanwaimai-updatetime.jpg">
<p>因此，牌照问题这个理由也是站不住脚的。</p>
<h3 id="u4E0B_u67B6_u7406_u7531_u731C_u6D4B"><a href="#u4E0B_u67B6_u7406_u7531_u731C_u6D4B" class="headerlink" title="下架理由猜测"></a>下架理由猜测</h3><p>那么，还有什么可能的下架理由吗？我突然想起来我以前在网易有道听到过的一个故事。</p>
<blockquote>
<p>有一家公司的 App 有个小问题，苹果的审核人员想让他们做一个修改，但是，苹果发现这家公司留的 Agent 帐号里的电话号码打不通（或者没人接），于是苹果就霸气地把人家的 App 直接下架了。这家公司当然慌了，赶紧联系苹果，于是这个小修改迅速被执行了，App 被重新上架。</p>
</blockquote>
<p>美团有可能遇上了类似的遭遇吗？我感觉是很有可能的。因为苹果在应用市场一贯强势的态度，让各大互联网公司都不敢怠慢。</p>
<p>而这种理由，也是最最可能不被苹果和美团公开的。因为对于苹果来说，因为联系不上就把人家全线 App 下架明显做法不太厚道。而对于美团来说，因为不敢得罪苹果，加上自己失误在先，也会选择不公开原因。</p>
<p>于是，技术原因就成了对外的公关说辞了。</p>
<h2 id="u6211_u89C1_u8FC7_u7684_u4E0B_u67B6_u4E8B_u4EF6"><a href="#u6211_u89C1_u8FC7_u7684_u4E0B_u67B6_u4E8B_u4EF6" class="headerlink" title="我见过的下架事件"></a>我见过的下架事件</h2><p>在我的 iOS 开发经历中，除了上面讲的那个沟通不畅带来的下架外，我还知道两次下架事件。</p>
<p>一次下架事件是关于抄袭的。2012 年 9 月，大众点评向苹果举报食神摇摇抄袭大众点评内容，于是食神摇摇被苹果 App Store 下架。这次算是公司维护知识产权的一次正常博弈。</p>
<p>另一次下架事件是关于人人网的。2013 年，人人网旗下的游戏因为在 AppStore 恶劣地刷榜行为，被苹果全线下架。AppStore 的刷榜行为其实到现在也没有停息过，而且做得更加隐蔽，我们公司也深受其害，而且我们向苹果举报也不管用，我本周会另外撰文介绍那些不为人知的刷榜手段。</p>
<h2 id="u5199_u5728_u6700_u540E"><a href="#u5199_u5728_u6700_u540E" class="headerlink" title="写在最后"></a>写在最后</h2><p>这个事情还有一点比较奇怪的是，我私下认识一些美团的 iOS 开发，连他们都不知道这件事情的背后原因，让这件事情更加神秘了。</p>
<p>另外，我了解到像微信这种海量用户的 App，会被苹果的审核团队特别照顾。除了能够获得快速的审核外，审核员也会和微信团队有更加密切的交流，以便微信能够快速响应审核意见。</p>
<p>我个人认为，除了微信以外，像美团这种在中国区 AppStore 总榜前十的应用，也理应受到这样的审核照顾。这种野蛮的下架，对于中国区的 iPhone 用户来说，也是一种伤害。</p>
<p>就在发稿前，美团在 AppStore 排名总榜第五（下图）。</p>
<img src="/images/meituan-rank.jpg">
<p>苹果现在更加重视中国市场了，而应用审核时更加良好的沟通，就是对于中国市场和开发者最大的激励，期望 AppStore 中国区越来越好。</p>
]]></content>
    <summary type="html">
    <![CDATA[<img src="/images/meituan.jpg">
<h2 id="u6545_u4E8B_u80CC_u666F"><a href="#u6545_u4E8B_u80CC_u666F" class="headerlink" title="故事背景"></a>故事背景]]>
    </summary>
    
      <category term="iOS" scheme="http://blog.devtang.com/categories/iOS/"/>
    
  </entry>
  
</feed>
